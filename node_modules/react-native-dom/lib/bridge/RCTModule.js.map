{"version":3,"sources":["../../ReactDom/bridge/RCTModule.js"],"names":["UNNAMED_MODULE","bridgeModuleNameForClass","cls","name","moduleName","startsWith","substring","RCTModule","bridge","functionMap","constructor","functions","promiseFunctions","syncFunctions","deepProps","x","Object","prototype","getOwnPropertyNames","concat","getPrototypeOf","methodID","proto","protoMembers","attr","member","push","constants","constantsToExport"],"mappings":"0aAEA,4DAcO,GAAMA,CAAAA,cAAc,CAAG,SAAvB,C,sCAEA,QAASC,CAAAA,wBAAT,CAAkCC,GAAlC,CAAiE,CACtE,GAAIC,CAAAA,IAAI,CAAGD,GAAG,CAACE,UAAf,CAEA,uBACED,IAAI,EAAI,IAAR,EAAgBA,IAAI,GAAKH,cAD3B,aAEaE,GAAG,CAACC,IAFjB,0DAKA,GAAIA,IAAI,CAACE,UAAL,CAAgB,IAAhB,CAAJ,CAA2B,CACzBF,IAAI,CAAGA,IAAI,CAACG,SAAL,CAAe,CAAf,CAAP,CACD,CAFD,IAEO,IAAIH,IAAI,CAACE,UAAL,CAAgB,KAAhB,CAAJ,CAA4B,CACjCF,IAAI,CAAGA,IAAI,CAACG,SAAL,CAAe,CAAf,CAAP,CACD,CAED,MAAOH,CAAAA,IAAP,CACD,C,GAiBoBI,CAAAA,S,YAMnB,mBAAYC,MAAZ,CAA+B,8CAC7B,KAAKA,MAAL,CAAcA,MAAd,CACA,KAAKC,WAAL,CAAmB,EAAnB,CACD,C,gGAE8B,CAC7B,MAAO,EAAP,CACD,C,6CAE8B,CAC7B,GAAIN,CAAAA,IAAI,CAAGF,wBAAwB,CAAC,KAAKS,WAAN,CAAnC,CAEA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CACA,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,CAAD,QAChBA,CAAAA,CAAC,EAEDA,CAAC,GAAKC,MAAM,CAACC,SAFb,EAGAD,MAAM,CAACE,mBAAP,CAA2BH,CAA3B,EAA8BI,MAA9B,CACEL,SAAS,CAACE,MAAM,CAACI,cAAP,CAAsBL,CAAtB,CAAD,CAAT,EAAuC,EADzC,CAJgB,EAAlB,CAQA,GAAIM,CAAAA,QAAQ,CAAG,CAAf,CAEA,GAAMC,CAAAA,KAAU,CAAGN,MAAM,CAACI,cAAP,CAAsB,IAAtB,CAAnB,CACA,GAAMG,CAAAA,YAA2B,CAAIT,SAAS,CAAC,IAAD,CAA9C,CACA,kBAAmBS,YAAnB,4IAAiC,uIAAtBC,CAAAA,KAAsB,MAC/B,GAAMC,CAAAA,MAAM,CAAGH,KAAK,CAACE,KAAD,CAApB,CAEA,GACEA,KAAI,CAAC,CAAD,CAAJ,GAAY,GAAZ,EACAA,KAAI,GAAK,aADT,EAEA,MAAOC,CAAAA,MAAP,GAAkB,UAHpB,CAIE,CACA,SACD,CACD,GAAItB,CAAAA,MAAI,CAAGqB,KAAX,CAEA,GAAIrB,MAAI,CAAC,CAAD,CAAJ,GAAY,GAAhB,CAAqB,CACnBA,MAAI,CAAGA,MAAI,CAACG,SAAL,CAAe,CAAf,CAAP,CAMA,GAAIH,MAAI,CAAC,CAAD,CAAJ,GAAY,GAAhB,CAAqB,CACnBA,MAAI,CAAGA,MAAI,CAACG,SAAL,CAAe,CAAf,CAAP,CACAM,gBAAgB,CAACc,IAAjB,CAAsBL,QAAtB,EACD,CAGD,KAAKZ,WAAL,CAAiBY,QAAjB,EAA6BI,MAA7B,CACAd,SAAS,CAACe,IAAV,CAAevB,MAAf,EACAkB,QAAQ,GACT,CACF,CAGD,GAAMM,CAAAA,SAAS,CAAG,KAAKC,iBAAL,EAAlB,CAEA,MAAO,CAACzB,IAAD,CAAOwB,SAAP,CAAkBhB,SAAlB,CAA6BC,gBAA7B,CAA+CC,aAA/C,CAAP,CACD,C,mDArEkBN,S,CACZH,U,CAAqBJ,c","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport type RCTBridge from \"RCTBridge\";\n\nexport type Constants = { [const: string]: any };\n\nexport type ModuleDescription = [\n  string,\n  Constants,\n  Array<string>,\n  Array<number>,\n  Array<number>\n];\n\nexport const UNNAMED_MODULE = \"UNNAMED\";\n\nexport function bridgeModuleNameForClass(cls: Class<RCTModule>): string {\n  let name = cls.moduleName;\n\n  invariant(\n    name != null && name !== UNNAMED_MODULE,\n    `Module \"${cls.name}\" does not have its static \\`moduleName\\` property set`\n  );\n\n  if (name.startsWith(\"RK\")) {\n    name = name.substring(2);\n  } else if (name.startsWith(\"RCT\")) {\n    name = name.substring(3);\n  }\n\n  return name;\n}\n\n/**\n * Modules are platform-specific implementations of functionality that can\n * be asynchronously called across the bridge.\n * This class serves as a base for all Modules, and provides the _describe\n * method used to extract attributes and send them to the web worker.\n * This React and runtime handshake can only be done once\n * The type and first character of the name of the attribute is used to\n * determine how the attribute is reflected\n *\n * - '_' denotes a hidden attribute and should not be reflected\n * - '$' is a function which is async in react code, for the runtime the fucntion\n *   take two automatic callback ids, success and reject, one of which must be called\n * - any other functions are added in the functionmap with a corresponding ID used by React code\n * - all other attributes are determined to be constants\n */\nexport default class RCTModule {\n  static moduleName: string = UNNAMED_MODULE;\n\n  functionMap: Array<() => any>;\n  bridge: RCTBridge;\n\n  constructor(bridge: RCTBridge) {\n    this.bridge = bridge;\n    this.functionMap = [];\n  }\n\n  constantsToExport(): Constants {\n    return {};\n  }\n\n  _describe(): ModuleDescription {\n    let name = bridgeModuleNameForClass(this.constructor);\n\n    const functions = [];\n    const promiseFunctions = [];\n    const syncFunctions = []; // Not currently supported\n\n    const deepProps = (x) =>\n      x &&\n      // $FlowFixMe\n      x !== Object.prototype &&\n      Object.getOwnPropertyNames(x).concat(\n        deepProps(Object.getPrototypeOf(x)) || []\n      );\n\n    let methodID = 0;\n    // Record prototype methods\n    const proto: any = Object.getPrototypeOf(this);\n    const protoMembers: Array<string> = (deepProps(this): any);\n    for (const attr of protoMembers) {\n      const member = proto[attr];\n      // Skip any \"private\" entries prefixed with an underscore\n      if (\n        attr[0] === \"_\" ||\n        attr === \"constructor\" ||\n        typeof member !== \"function\"\n      ) {\n        continue;\n      }\n      let name = attr;\n\n      if (name[0] === \"$\") {\n        name = name.substring(1);\n\n        // by default functions are denoted as remote\n        // by prepending a $ onto the name the function is denoted as a special,\n        // async function that uses Promises\n        // the $ is removed from the name before registering with the react code\n        if (name[0] === \"$\") {\n          name = name.substring(1);\n          promiseFunctions.push(methodID);\n        }\n\n        // record the mapping from ID used by React to the real function\n        this.functionMap[methodID] = member;\n        functions.push(name);\n        methodID++;\n      }\n    }\n\n    // Record exported constants\n    const constants = this.constantsToExport();\n\n    return [name, constants, functions, promiseFunctions, syncFunctions];\n  }\n}\n\nexport type NativeModuleImports = Array<\n  Promise<Class<RCTModule>> | Class<RCTModule>\n>;\n"],"file":"RCTModule.js"}