{"version":3,"sources":["../../ReactDom/bridge/RCTEventDispatcher.js"],"names":["RCTTextEventType","RCTTextEventTypeFocus","RCTTextEventTypeBlur","RCTTextEventTypeChange","RCTTextEventTypeSubmit","RCTTextEventTypeEnd","RCTTextEventTypeKeyPress","capitalizeFirstLetter","string","charAt","toUpperCase","slice","normalizeInputEventName","eventName","startsWith","substring","stringToHash","input","hash","chr","length","i","charCodeAt","RCTEventDispatcher","event","viewTag","coalescingKey","bridge","events","eventQueue","eventsDispatchScheduled","observers","Set","name","body","enqueueJSCall","target","type","reactTag","text","key","eventCount","sendInputEvent","observer","eventDispatcherWillDispatchEvent","eventID","RCTGetEventID","previousEvent","canCoalesce","coalesceWithEvent","push","scheduleEventsDispatch","flushEventsQueue","enqueueJSCallWithDotMethod","moduleDotMethod","arguments","forEach","eventId","dispatchEvent","add","delete","RCTModule","moduleName"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\n\nexport const RCTTextEventType = {\n  RCTTextEventTypeFocus: 0,\n  RCTTextEventTypeBlur: 1,\n  RCTTextEventTypeChange: 2,\n  RCTTextEventTypeSubmit: 3,\n  RCTTextEventTypeEnd: 4,\n  RCTTextEventTypeKeyPress: 5\n};\n\nexport interface RCTEvent {\n  viewTag: number;\n  eventName: string;\n  coalescingKey: number;\n\n  canCoalesce(): boolean;\n  coalesceWithEvent(event: RCTEvent): RCTEvent;\n\n  moduleDotMethod(): string;\n  arguments(): Array<any>;\n}\n\nexport interface RCTEventDispatcherObserver {\n  eventDispatcherWillDispatchEvent(event: RCTEvent): void;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function normalizeInputEventName(eventName: string) {\n  if (eventName.startsWith(\"on\")) {\n    eventName = `top${eventName.substring(2)}`;\n  } else if (!eventName.startsWith(\"top\")) {\n    eventName = `top${capitalizeFirstLetter(eventName)}`;\n  }\n\n  return eventName;\n}\n\nfunction stringToHash(input: string): number {\n  let hash = 0,\n    chr;\n  if (input.length === 0) return hash;\n  for (let i = 0; i < input.length; i++) {\n    chr = input.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nclass RCTEventDispatcher extends RCTModule {\n  static moduleName = \"RCTEventDispatcher\";\n\n  events: { [number]: RCTEvent };\n  eventQueue: Array<number>;\n  // queueLock ??\n  eventsDispatchScheduled: boolean;\n  observers: Set<RCTEventDispatcherObserver>;\n  // observersLock ??\n\n  static RCTGetEventID(event: RCTEvent): number {\n    return (\n      event.viewTag |\n      ((stringToHash(event.eventName) & 0xffff) << 32) |\n      (event.coalescingKey << 48)\n    );\n  }\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.events = {};\n    this.eventQueue = [];\n    this.eventsDispatchScheduled = false;\n    this.observers = new Set();\n  }\n\n  sendDeviceEvent(name: string, body: ?Object) {\n    this.bridge.enqueueJSCall(\n      \"RCTDeviceEventEmitter\",\n      \"emit\",\n      body ? [name, body] : [name]\n    );\n  }\n\n  sendInputEvent(name: string, body: Object) {\n    name = normalizeInputEventName(name);\n    this.bridge.enqueueJSCall(\"RCTEventEmitter\", \"receiveEvent\", [\n      body.target,\n      name,\n      body\n    ]);\n  }\n\n  /**\n   * Send a text input/focus event. For internal use only.\n   */\n  sendTextEvent(\n    type: number,\n    reactTag: number,\n    text: string,\n    key: ?string,\n    eventCount: number\n  ) {\n    const events = [\n      \"focus\",\n      \"blur\",\n      \"change\",\n      \"submitEditing\",\n      \"endEditing\",\n      \"keyPress\"\n    ];\n\n    const body: Object = {\n      eventCount,\n      target: reactTag\n    };\n\n    if (text) {\n      body.text = text;\n    }\n\n    if (key) {\n      // TODO: Key Event Handling\n    }\n\n    this.sendInputEvent(events[type], body);\n  }\n\n  /**\n   * Send a pre-prepared event object.\n   *\n   * Events are sent to JS as soon as the thread is free to process them.\n   * If an event can be coalesced and there is another compatible event waiting, the coalescing will happen immediately.\n   */\n  sendEvent(event: RCTEvent) {\n    for (let observer of this.observers) {\n      observer.eventDispatcherWillDispatchEvent(event);\n    }\n\n    const eventID = RCTEventDispatcher.RCTGetEventID(event);\n\n    const previousEvent = this.events[eventID];\n    if (previousEvent) {\n      invariant(\n        event.canCoalesce(),\n        `Got event which cannot be coalesced, but has the same eventID ${eventID} as the previous event`\n      );\n      event = previousEvent.coalesceWithEvent(previousEvent);\n    } else {\n      this.eventQueue.push(eventID);\n    }\n\n    this.events[eventID] = event;\n\n    let scheduleEventsDispatch = false;\n    if (!this.eventsDispatchScheduled) {\n      this.eventsDispatchScheduled = true;\n      scheduleEventsDispatch = true;\n    }\n\n    if (scheduleEventsDispatch) {\n      this.flushEventsQueue();\n    }\n  }\n\n  dispatchEvent(event: RCTEvent) {\n    this.bridge.enqueueJSCallWithDotMethod(\n      event.moduleDotMethod(),\n      event.arguments()\n    );\n  }\n\n  flushEventsQueue() {\n    const events = { ...this.events };\n    this.events = {};\n\n    const eventQueue = [...this.eventQueue];\n    this.eventQueue = [];\n\n    this.eventsDispatchScheduled = false;\n\n    eventQueue.forEach((eventId) => {\n      this.dispatchEvent(events[eventId]);\n    });\n  }\n\n  addDispatchObserver(observer: RCTEventDispatcherObserver) {\n    this.observers.add(observer);\n  }\n\n  removeDispatchObserver(observer: RCTEventDispatcherObserver) {\n    this.observers.delete(observer);\n  }\n}\n\nexport default RCTEventDispatcher;\n"],"file":"RCTEventDispatcher.js"}