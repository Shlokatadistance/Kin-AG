{"version":3,"sources":["../../ReactDom/modules/RCTAsyncLocalStorage.js"],"names":["RCTAsyncLocalStorage","keys","callbackId","callback","bridge","callbackFromId","Promise","all","map","key","idbKeyval","get","then","result","value","index","catch","err","kvPairs","prevValue","nextValue","set","del","clear","RCTModule","moduleName"],"mappings":"63BAEA,6DACA,4DAEA,yE,GAGMA,CAAAA,oB,8XAGMC,I,CAAgBC,U,CAAoB,CAC5C,GAAMC,CAAAA,QAAQ,CAAG,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,CAAjB,CACAI,OAAO,CAACC,GAAR,CACEN,IAAI,CAACO,GAAL,CAAS,SAACC,GAAD,CAAS,CAChB,MAAOC,CAAAA,SAAS,CAACC,GAAV,CAAcF,GAAd,CAAP,CACD,CAFD,CADF,EAKGG,IALH,CAKQ,SAACC,MAAD,CAAY,CAChBV,QAAQ,CAAC,IAAD,CAAOU,MAAM,CAACL,GAAP,CAAW,SAACM,KAAD,CAAQC,KAAR,QAAkB,CAACd,IAAI,CAACc,KAAD,CAAL,CAAcD,KAAd,CAAlB,EAAX,CAAP,CAAR,CACD,CAPH,EAQGE,KARH,CAQS,SAACC,GAAD,CAAS,CACdd,QAAQ,CAACc,GAAD,CAAR,CACD,CAVH,EAWD,C,gDAEWC,O,CAA0BhB,U,CAAoB,CACxD,GAAMC,CAAAA,QAAQ,CAAG,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,CAAjB,CACAI,OAAO,CAACC,GAAR,CACEW,OAAO,CAACV,GAAR,CAAY,cAAsB,+CAApBC,GAAoB,UAAfU,SAAe,UAChC,MAAOT,CAAAA,SAAS,CAACC,GAAV,CAAcF,GAAd,EAAmBG,IAAnB,CAAwB,SAACQ,SAAD,CAAe,CAC5C,GAAIA,SAAS,EAAI,IAAb,EAAqB,MAAOA,CAAAA,SAAP,GAAqB,QAA9C,CAAwD,CACtD,MAAOV,CAAAA,SAAS,CAACW,GAAV,CAAcZ,GAAd,CAAmBU,SAAnB,CAAP,CACD,CACD,MAAOT,CAAAA,SAAS,CAACW,GAAV,CAAcZ,GAAd,CAAmB,uBAAUU,SAAV,CAAqBC,SAArB,CAAnB,CAAP,CACD,CALM,CAAP,CAMD,CAPD,CADF,EASER,IATF,CASO,UAAM,CACXT,QAAQ,GACT,CAXD,EAYD,C,4CAESe,O,CAA0BhB,U,CAAoB,CACtD,GAAMC,CAAAA,QAAQ,CAAG,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,CAAjB,CACAI,OAAO,CAACC,GAAR,CACEW,OAAO,CAACV,GAAR,CAAY,eAAkB,gDAAhBC,GAAgB,UAAXK,KAAW,UAC5B,MAAOJ,CAAAA,SAAS,CAACW,GAAV,CAAcZ,GAAd,CAAmBK,KAAnB,CAAP,CACD,CAFD,CADF,EAIEF,IAJF,CAIO,UAAM,CACXT,QAAQ,GACT,CAND,EAOD,C,kDAEYF,I,CAAgBC,U,CAAoB,CAC/C,GAAMC,CAAAA,QAAQ,CAAG,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,CAAjB,CACAI,OAAO,CAACC,GAAR,CACEN,IAAI,CAACO,GAAL,CAAS,SAACC,GAAD,CAAS,CAChB,MAAOC,CAAAA,SAAS,CAACY,GAAV,CAAcb,GAAd,CAAP,CACD,CAFD,CADF,EAIEG,IAJF,CAIO,UAAM,CACXT,QAAQ,GACT,CAND,EAOD,C,gDAEiBD,U,0IACVC,Q,CAAW,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,C,mEAEIQ,SAAS,CAACT,IAAV,E,SAAbA,I,eACNE,QAAQ,CAAC,IAAD,CAAOF,IAAP,CAAR,C,+EAEAE,QAAQ,aAAM,IAAN,CAAR,C,uGAISD,U,mIACLC,Q,CAAW,KAAKC,MAAL,CAAYC,cAAZ,CAA2BH,UAA3B,C,qEAETQ,SAAS,CAACa,KAAV,E,SACNpB,QAAQ,CAAC,IAAD,CAAR,C,mFAEAA,QAAQ,cAAR,C,oGAxE6BqB,mB,EAA7BxB,oB,CACGyB,U,CAAa,sB,cA4EPzB,oB","sourcesContent":["/** @flow */\n\nimport * as idbKeyval from \"idb-keyval\";\nimport deepmerge from \"deepmerge\";\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\n\nclass RCTAsyncLocalStorage extends RCTModule {\n  static moduleName = \"RCTAsyncLocalStorage\";\n\n  $multiGet(keys: string[], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    Promise.all(\n      keys.map((key) => {\n        return idbKeyval.get(key);\n      })\n    )\n      .then((result) => {\n        callback(null, result.map((value, index) => [keys[index], value]));\n      })\n      .catch((err) => {\n        callback(err);\n      });\n  }\n\n  $multiMerge(kvPairs: [string, any][], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    Promise.all(\n      kvPairs.map(([key, prevValue]) => {\n        return idbKeyval.get(key).then((nextValue) => {\n          if (nextValue == null || typeof nextValue !== \"object\") {\n            return idbKeyval.set(key, prevValue);\n          }\n          return idbKeyval.set(key, deepmerge(prevValue, nextValue));\n        });\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  $multiSet(kvPairs: [string, any][], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    Promise.all(\n      kvPairs.map(([key, value]) => {\n        return idbKeyval.set(key, value);\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  $multiRemove(keys: string[], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    Promise.all(\n      keys.map((key) => {\n        return idbKeyval.del(key);\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  async $getAllKeys(callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    try {\n      const keys = await idbKeyval.keys();\n      callback(null, keys);\n    } catch (err) {\n      callback(err, null);\n    }\n  }\n\n  async $clear(callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    try {\n      await idbKeyval.clear();\n      callback(null);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n\nexport default RCTAsyncLocalStorage;\n"],"file":"RCTAsyncLocalStorage.js"}