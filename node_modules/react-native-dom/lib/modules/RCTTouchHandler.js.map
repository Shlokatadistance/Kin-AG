{"version":3,"sources":["../../ReactDom/modules/RCTTouchHandler.js"],"names":["mouseTouchCounter","TOUCH_LISTENER_OPTIONS","detectIt","passiveEvents","passive","capture","getFirstParentUIView","target","parentElement","UIView","UIChildContainerView","RCTTouchHandler","bridge","stopPropagation","e","preventDefault","pointerBegan","event","touches","RCTNormalizeInteractionEvent","touchesBegan","view","addEventListener","pointerEnded","pointerMoved","pointerCancelled","touchesMoved","touchesEnded","removePointerEvents","touchesCanceled","eventDispatcher","moduleForClass","RCTEventDispatcher","nativeTouches","nativeTouchesByIdentifier","reactTouches","touchViews","addGestureRecognizer","deviceType","isIOS","undefined","removeGestureRecognizer","removeEventListener","forEach","touch","hasOwnProperty","identifier","targetView","reactTag","touchable","touchID","reactTouch","push","nativeTouch","index","indexOf","splice","touchIndex","newTouch","updatedReactTouch","pageX","pageY","locationX","locationY","timestamp","eventName","changedIndexes","console","log","updateReactTouch","length","map","canBeCoalesced","coalescingKey","RCTTouchEvent","sendEvent","recordNewTouches","updateAndDispatchTouches","recordRemovedTouches","rawEvent","which","button","clientX","clientY","performance","now"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport detectIt from \"detect-it\";\nimport invariant from \"invariant\";\n\nimport type RCTBridge from \"RCTBridge\";\nimport UIView from \"UIView\";\nimport UIChildContainerView from \"UIChildContainerView\";\nimport RCTEventDispatcher from \"RCTEventDispatcher\";\nimport RCTTouchEvent from \"RCTTouchEvent\";\nimport isIOS from \"isIOS\";\nimport guid from \"Guid\";\n\ntype UITouch = {\n  view: UIView | UIChildContainerView,\n  identifier: number,\n  pageX: number,\n  pageY: number,\n  locationX: number,\n  locationY: number,\n  timestamp: number\n};\n\ntype ReactTouch = {\n  target: number,\n  identifier: number,\n  pageX?: number,\n  pageY?: number,\n  locationX?: number,\n  locationY?: number,\n  timestamp?: number\n};\n\nlet mouseTouchCounter = 1;\n\nconst TOUCH_LISTENER_OPTIONS = detectIt.passiveEvents\n  ? { passive: true, capture: false }\n  : false;\n\nfunction getFirstParentUIView(target: any) {\n  while (target.parentElement) {\n    if (target instanceof UIView || target instanceof UIChildContainerView) {\n      return target;\n    }\n    target = target.parentElement;\n  }\n  return target;\n}\n\nclass RCTTouchHandler {\n  eventDispatcher: RCTEventDispatcher;\n\n  nativeTouchesByIdentifier: { [number]: UITouch };\n  nativeTouches: Array<UITouch>;\n  reactTouches: Array<ReactTouch>;\n  touchViews: Array<UIView>;\n  coalescingKey: number;\n\n  view: ?UIView;\n\n  constructor(bridge: RCTBridge) {\n    this.eventDispatcher = (bridge.moduleForClass(\n      (RCTEventDispatcher: any)\n    ): any);\n\n    this.nativeTouches = [];\n    this.nativeTouchesByIdentifier = {};\n    this.reactTouches = [];\n    this.touchViews = [];\n  }\n\n  static RCTNormalizeInteractionEvent(rawEvent: PointerEvent): ?Array<UITouch> {\n    rawEvent.stopPropagation();\n\n    const target: UIView = getFirstParentUIView(rawEvent.target);\n\n    if (\"which\" in rawEvent && rawEvent.which === 3) {\n      return null;\n    } else if (\"button\" in rawEvent && rawEvent.button === 2) {\n      return null;\n    }\n\n    return [\n      {\n        view: target,\n        identifier: 0,\n        pageX: rawEvent.pageX,\n        pageY: rawEvent.pageY,\n        locationX: rawEvent.clientX,\n        locationY: rawEvent.clientY,\n        timestamp: performance.now()\n      }\n    ];\n  }\n\n  stopPropagation = (e: TouchEvent) => e.stopPropagation();\n  preventDefault = (e: TouchEvent) => e.preventDefault();\n\n  attachToView(view: UIView) {\n    this.view = view;\n    view.addGestureRecognizer(\n      this,\n      detectIt.deviceType,\n      TOUCH_LISTENER_OPTIONS\n    );\n\n    if (isIOS) {\n      view.addEventListener(\n        \"touchmove\",\n        this.stopPropagation,\n        TOUCH_LISTENER_OPTIONS\n      );\n\n      view.parentElement &&\n        view.parentElement.addEventListener(\n          \"touchmove\",\n          this.preventDefault,\n          TOUCH_LISTENER_OPTIONS\n        );\n    }\n  }\n\n  detachFromView(view: UIView) {\n    this.view = undefined;\n    view.removeGestureRecognizer(this, TOUCH_LISTENER_OPTIONS);\n\n    if (isIOS) {\n      view.removeEventListener(\n        \"touchmove\",\n        this.stopPropagation,\n        TOUCH_LISTENER_OPTIONS\n      );\n\n      view.parentElement &&\n        view.parentElement.removeEventListener(\n          \"touchmove\",\n          this.preventDefault,\n          TOUCH_LISTENER_OPTIONS\n        );\n    }\n  }\n\n  recordNewTouches(touches: Array<UITouch>) {\n    touches.forEach((touch) => {\n      invariant(\n        !this.nativeTouchesByIdentifier.hasOwnProperty(touch.identifier),\n        \"Touch is already recorded. This is a critical bug\"\n      );\n\n      // Find closest React-managed touchable element\n      let targetView = (touch.view: any);\n      while (targetView) {\n        if (targetView === this.view) break;\n        if (targetView.reactTag && targetView.touchable) break;\n        targetView = targetView.parentElement;\n      }\n\n      const reactTag = targetView.reactTag;\n      const touchID = touch.identifier;\n\n      // Create touch\n      const reactTouch = {\n        target: reactTag,\n        identifier: touchID\n      };\n\n      // Add to arrays\n      this.touchViews.push(targetView);\n      this.nativeTouches.push(touch);\n      this.nativeTouchesByIdentifier[touchID] = touch;\n      this.reactTouches.push(reactTouch);\n    });\n  }\n\n  recordRemovedTouches(touches: Array<UITouch>) {\n    for (let touch of touches) {\n      const nativeTouch = this.nativeTouchesByIdentifier[touch.identifier];\n\n      if (!nativeTouch) {\n        continue;\n      }\n\n      const index = this.nativeTouches.indexOf(nativeTouch);\n\n      this.touchViews.splice(index, 1);\n      this.nativeTouches.splice(index, 1);\n      delete this.nativeTouchesByIdentifier[touch.identifier];\n      this.reactTouches.splice(index, 1);\n    }\n  }\n\n  updateReactTouch(touchIndex: number, newTouch: UITouch) {\n    const reactTouch = this.reactTouches[touchIndex];\n\n    const updatedReactTouch = {\n      ...reactTouch,\n      pageX: newTouch.pageX,\n      pageY: newTouch.pageY,\n      locationX: newTouch.locationX,\n      locationY: newTouch.locationY,\n      timestamp: newTouch.timestamp\n    };\n\n    // TODO: force touch\n\n    this.reactTouches[touchIndex] = updatedReactTouch;\n  }\n\n  updateAndDispatchTouches(touches: Array<UITouch>, eventName: string) {\n    const changedIndexes = [];\n    for (let touch of touches) {\n      const nativeTouch = this.nativeTouchesByIdentifier[touch.identifier];\n      if (!nativeTouch) {\n        console.log(\"updateAndDispatch failed\");\n        continue;\n      }\n\n      const index = this.nativeTouches.indexOf(nativeTouch);\n\n      if (index === -1) continue;\n\n      this.updateReactTouch(index, touch);\n      changedIndexes.push(index);\n    }\n\n    if (changedIndexes.length === 0) {\n      console.log(\"no changed Indexes\");\n      return;\n    }\n\n    const reactTouches = this.reactTouches.map((reactTouch) => ({\n      ...reactTouch\n    }));\n\n    const canBeCoalesced = eventName === \"touchMove\";\n\n    if (!canBeCoalesced) {\n      this.coalescingKey++;\n    }\n\n    invariant(this.view, \"attempting to send event to unknown view\");\n\n    const event = new RCTTouchEvent(\n      eventName,\n      this.view.reactTag,\n      reactTouches,\n      changedIndexes,\n      this.coalescingKey\n    );\n\n    if (!canBeCoalesced) {\n      this.coalescingKey++;\n    }\n\n    this.eventDispatcher.sendEvent(event);\n  }\n\n  pointerBegan = (event: PointerEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesBegan(touches);\n\n    const view = this.view;\n    if (view) {\n      // $FlowFixMe\n      view.addEventListener(\n        \"pointerup\",\n        this.pointerEnded,\n        TOUCH_LISTENER_OPTIONS\n      );\n      // $FlowFixMe\n      view.addEventListener(\n        \"pointermove\",\n        this.pointerMoved,\n        TOUCH_LISTENER_OPTIONS\n      );\n      // $FlowFixMe\n      view.addEventListener(\n        \"pointercancel\",\n        this.pointerCancelled,\n        TOUCH_LISTENER_OPTIONS\n      );\n    }\n  };\n\n  pointerMoved = (event: PointerEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesMoved(touches);\n  };\n\n  pointerEnded = (event: PointerEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesEnded(touches);\n\n    const view = this.view;\n    if (view) {\n      this.removePointerEvents(view);\n    }\n  };\n\n  pointerCancelled = (event: PointerEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesCanceled(touches);\n\n    const view = this.view;\n    if (view) {\n      this.removePointerEvents(view);\n    }\n  };\n\n  removePointerEvents(view: UIView) {\n    // $FlowFixMe\n    view.removeEventListener(\n      \"pointerup\",\n      this.pointerEnded,\n      TOUCH_LISTENER_OPTIONS\n    );\n    // $FlowFixMe\n    view.removeEventListener(\n      \"pointermove\",\n      this.pointerMoved,\n      TOUCH_LISTENER_OPTIONS\n    );\n    // $FlowFixMe\n    view.removeEventListener(\n      \"pointercancel\",\n      this.pointerCancelled,\n      TOUCH_LISTENER_OPTIONS\n    );\n  }\n\n  touchesBegan(touches: Array<UITouch>) {\n    this.recordNewTouches(touches);\n    this.updateAndDispatchTouches(touches, \"touchStart\");\n  }\n\n  touchesMoved(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchMove\");\n  }\n\n  touchesEnded(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchEnd\");\n    this.recordRemovedTouches(touches);\n  }\n\n  touchesCanceled(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchCancel\");\n    this.recordRemovedTouches(touches);\n  }\n}\n\nexport default RCTTouchHandler;\n"],"file":"RCTTouchHandler.js"}