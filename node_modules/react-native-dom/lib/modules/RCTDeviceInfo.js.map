{"version":3,"sources":["../../ReactDom/modules/RCTDeviceInfo.js"],"names":["RCTDeviceInfo","didUpdateDimensions","sendEventWithName","exportedDimensions","resizeObserver","ResizeObserver","observe","bridge","parent","window","matchMedia","addListener","unobserve","removeEventListener","Dimensions","dims","width","Math","ceil","offsetWidth","height","offsetHeight","scale","getDevicePixelRatio","fontScale","screen","ratio","systemXDPI","undefined","logicalXDPI","devicePixelRatio","min","RCTEventEmitter","moduleName"],"mappings":"6nBAEA,wFAGA,sF,GAEMA,CAAAA,a,8cAGJC,mB,CAAsB,UAAM,CAC1B,MAAKC,iBAAL,CAAuB,qBAAvB,CAA8C,MAAKC,kBAAL,EAA9C,EACD,C,OAEDC,c,CAAiB,GAAIC,gCAAJ,CAAmB,MAAKJ,mBAAxB,C,6GAEA,CACf,KAAKG,cAAL,CAAoBE,OAApB,CAA4B,KAAKC,MAAL,CAAYC,MAAxC,EACAC,MAAM,CACHC,UADH,CACc,oCADd,EAEGC,WAFH,CAEe,KAAKV,mBAFpB,EAGD,C,qDAEe,CACd,KAAKG,cAAL,CAAoBQ,SAApB,CAA8B,KAAKL,MAAL,CAAYC,MAA1C,EACAC,MAAM,CACHC,UADH,CACc,oCADd,EAEGG,mBAFH,CAEuB,KAAKZ,mBAF5B,EAGD,C,6DAEmB,CAClB,MAAO,CACLa,UAAU,CAAE,KAAKX,kBAAL,EADP,CAAP,CAGD,C,yDAEiB,CAChB,MAAO,CAAC,qBAAD,CAAP,CACD,C,+DAEoB,CACnB,GAAMY,CAAAA,IAAI,CAAG,CACXC,KAAK,CAAEC,IAAI,CAACC,IAAL,CAAU,KAAKX,MAAL,CAAYC,MAAZ,CAAmBW,WAA7B,CADI,CAEXC,MAAM,CAAEH,IAAI,CAACC,IAAL,CAAU,KAAKX,MAAL,CAAYC,MAAZ,CAAmBa,YAA7B,CAFG,CAGXC,KAAK,CAAE,KAAKC,mBAAL,EAHI,CAIXC,SAAS,CAAE,CAJA,CAAb,CAOA,MAAO,CACLf,MAAM,CAAEM,IADH,CAELU,MAAM,CAAEV,IAFH,CAAP,CAID,C,iEAE6B,CAC5B,GAAIW,CAAAA,KAAK,CAAG,CAAZ,CAEA,GACEjB,MAAM,CAACgB,MAAP,CAAcE,UAAd,GAA6BC,SAA7B,EACAnB,MAAM,CAACgB,MAAP,CAAcI,WAAd,GAA8BD,SAD9B,EAEAnB,MAAM,CAACgB,MAAP,CAAcE,UAAd,CAA2BlB,MAAM,CAACgB,MAAP,CAAcI,WAH3C,CAIE,CAEAH,KAAK,CAAGjB,MAAM,CAACgB,MAAP,CAAcE,UAAd,CAA2BlB,MAAM,CAACgB,MAAP,CAAcI,WAAjD,CACD,CAPD,IAOO,IAAIpB,MAAM,CAACqB,gBAAP,GAA4BF,SAAhC,CAA2C,CAChDF,KAAK,CAAGjB,MAAM,CAACqB,gBAAf,CACD,CAID,MAAOb,CAAAA,IAAI,CAACc,GAAL,CAASL,KAAT,CAAgB,CAAhB,CAAP,CACD,C,2BAhEyBM,8B,EAAtBhC,a,CACGiC,U,CAAa,e,cAkEPjC,a","sourcesContent":["/** @flow */\n\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport type RCTBridge from \"RCTBridge\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\nclass RCTDeviceInfo extends RCTEventEmitter {\n  static moduleName = \"RCTDeviceInfo\";\n\n  didUpdateDimensions = () => {\n    this.sendEventWithName(\"didUpdateDimensions\", this.exportedDimensions());\n  };\n\n  resizeObserver = new ResizeObserver(this.didUpdateDimensions);\n\n  startObserving() {\n    this.resizeObserver.observe(this.bridge.parent);\n    window\n      .matchMedia(\"screen and (min-resolution: 2dppx)\")\n      .addListener(this.didUpdateDimensions);\n  }\n\n  stopObserving() {\n    this.resizeObserver.unobserve(this.bridge.parent);\n    window\n      .matchMedia(\"screen and (min-resolution: 2dppx)\")\n      .removeEventListener(this.didUpdateDimensions);\n  }\n\n  constantsToExport() {\n    return {\n      Dimensions: this.exportedDimensions()\n    };\n  }\n\n  supportedEvents() {\n    return [\"didUpdateDimensions\"];\n  }\n\n  exportedDimensions() {\n    const dims = {\n      width: Math.ceil(this.bridge.parent.offsetWidth),\n      height: Math.ceil(this.bridge.parent.offsetHeight),\n      scale: this.getDevicePixelRatio(),\n      fontScale: 1\n    };\n\n    return {\n      window: dims,\n      screen: dims\n    };\n  }\n\n  getDevicePixelRatio(): number {\n    let ratio = 1;\n    // To account for zoom, change to use deviceXDPI instead of systemXDPI\n    if (\n      window.screen.systemXDPI !== undefined &&\n      window.screen.logicalXDPI !== undefined &&\n      window.screen.systemXDPI > window.screen.logicalXDPI\n    ) {\n      // Only allow for values > 1\n      ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    } else if (window.devicePixelRatio !== undefined) {\n      ratio = window.devicePixelRatio;\n    }\n\n    // iOS displays with 3x ratio don't properly display hairlines\n    // so set max ratio to 2\n    return Math.min(ratio, 2);\n  }\n}\n\nexport default RCTDeviceInfo;\n"],"file":"RCTDeviceInfo.js"}