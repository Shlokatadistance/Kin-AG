{"version":3,"sources":["../../ReactDom/modules/RCTNativeEventEmitter.js"],"names":["RCTNativeEventEmitter","bridge","_listenerCount","eventName","body","constructor","name","enqueueJSCall","NotificationCenter","emitEvent","console","warn","addListener","callback","startObserving","removeListener","$removeListeners","count","Math","max","stopObserving","RCTModule"],"mappings":"6nBAEA,4DAEA,yEAEA,wF,GAEMA,CAAAA,qB,+EAGJ,+BAAYC,MAAZ,CAA+B,oEAC7B,iHAAMA,MAAN,GAD6B,MAF/BC,cAE+B,CAFN,CAEM,cAE9B,C,0GAEiC,CAChC,MAAO,EAAP,CACD,C,4DAEiBC,S,CAAmBC,I,CAAW,CAC9C,uBACE,KAAKH,MADP,CAEE,8FAEI,KAAKI,WAAL,CAAiBC,IAFrB,kCAIE,6BANJ,EAWA,GAAI,KAAKJ,cAAL,CAAsB,CAA1B,CAA6B,CAC3B,KAAKD,MAAL,CAAYM,aAAZ,CACE,uBADF,CAEE,MAFF,CAGEH,IAAI,CAAG,CAACD,SAAD,CAAYC,IAAZ,CAAH,CAAuB,CAACD,SAAD,CAH7B,EAKAK,4BAAmBC,SAAnB,CAA6BN,SAA7B,CAAwC,CAACC,IAAD,CAAxC,EACD,CAPD,IAOO,CACLM,OAAO,CAACC,IAAR,YAAwBR,SAAxB,kCACD,CACF,C,uDAEgB,CAEhB,C,qDAEe,CAEf,C,kDAEYA,S,CAAmB,CAC9B,KAAKS,WAAL,CAAiBT,SAAjB,EACD,C,gDAEWA,S,CAAmBU,Q,CAAgC,CAG7D,GAAIA,QAAQ,EAAI,IAAhB,CAAsB,CACpBL,4BAAmBI,WAAnB,CAA+BT,SAA/B,CAA0CU,QAA1C,EACD,CAED,KAAKX,cAAL,GACA,GAAI,KAAKA,cAAL,GAAwB,CAA5B,CAA+B,CAC7B,KAAKY,cAAL,GACD,CACF,C,sDAEcX,S,CAAmBU,Q,CAAqB,CACrD,GAAIA,QAAQ,EAAI,IAAhB,CAAsB,CACpBL,4BAAmBO,cAAnB,CAAkCZ,SAAlC,CAA6CU,QAA7C,EACD,CACD,KAAKG,gBAAL,CAAsB,CAAtB,EACD,C,0DAEgBC,K,CAAe,CAG9B,KAAKf,cAAL,CAAsBgB,IAAI,CAACC,GAAL,CAAS,KAAKjB,cAAL,CAAsBe,KAA/B,CAAsC,CAAtC,CAAtB,CACA,GAAI,KAAKf,cAAL,GAAwB,CAA5B,CAA+B,CAC7B,KAAKkB,aAAL,GACD,CACF,C,mCA1EiCC,mB,eA6ErBrB,qB","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\nimport NotificationCenter from \"NotificationCenter\";\n\nclass RCTNativeEventEmitter extends RCTModule {\n  _listenerCount: number = 0;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n  }\n\n  supportedMethods(): Array<string> {\n    return [];\n  }\n\n  sendEventWithName(eventName: string, body: any) {\n    invariant(\n      this.bridge,\n      \"bridge is not set. This is probably because you've\" +\n        `explicitly synthesized the bridge in ${\n          this.constructor.name\n        }, even though it's inherited ` +\n        \"from RCTNativeEventEmitter.\"\n    );\n\n    // TODO: Add debug check for supportedEvents\n\n    if (this._listenerCount > 0) {\n      this.bridge.enqueueJSCall(\n        \"RCTDeviceEventEmitter\",\n        \"emit\",\n        body ? [eventName, body] : [eventName]\n      );\n      NotificationCenter.emitEvent(eventName, [body]);\n    } else {\n      console.warn(`Sending ${eventName} with no listeners registered`);\n    }\n  }\n\n  startObserving() {\n    /* To be overriden by subclass */\n  }\n\n  stopObserving() {\n    /* To be overriden by subclass */\n  }\n\n  $addListener(eventName: string) {\n    this.addListener(eventName);\n  }\n\n  addListener(eventName: string, callback: ?(body: any) => void) {\n    // TODO: Add debug check for supportedEvents\n\n    if (callback != null) {\n      NotificationCenter.addListener(eventName, callback);\n    }\n\n    this._listenerCount++;\n    if (this._listenerCount === 1) {\n      this.startObserving();\n    }\n  }\n\n  removeListener(eventName: string, callback: ?Function) {\n    if (callback != null) {\n      NotificationCenter.removeListener(eventName, callback);\n    }\n    this.$removeListeners(1);\n  }\n\n  $removeListeners(count: number) {\n    // TODO: Add debug check for supportedEvents\n\n    this._listenerCount = Math.max(this._listenerCount - count, 0);\n    if (this._listenerCount === 0) {\n      this.stopObserving();\n    }\n  }\n}\n\nexport default RCTNativeEventEmitter;\n"],"file":"RCTNativeEventEmitter.js"}