{"version":3,"sources":["../../ReactDom/modules/RCTNetworkingNative.js"],"names":["parseHttpHeaders","httpHeaders","split","map","x","filter","reduce","ac","requestIdCounter","RCTNetworkingNative","bridge","requestStore","handleLoadEnd","request","responseURL","headers","getAllResponseHeaders","status","responseJSON","requestId","sendEventWithName","handleLoad","responseType","sendData","completeJSON","handleError","handleAbort","requestHandlers","responseHandlers","handler","canHandleNetworkingResponse","responseData","handleNetworkingResponse","response","undefined","JSON","stringify","console","warn","query","callbackId","data","method","url","withCredentials","timeout","req","XMLHttpRequest","open","addEventListener","Object","entries","forEach","header","value","setRequestHeader","body","canHandleNetworkingRequest","handleNetworkingRequest","tempBody","contentType","string","base64","send","callbackFromId","log","push","index","indexOf","splice","RCTEventEmitter","moduleName"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type RCTBridge from \"RCTBridge\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\ntype DataTypeString = { string: string };\ntype DataTypeUri = { uri: string };\ntype DataTypeFormData = { formData: string[] };\ntype DataTypeBlob = { blob: Object };\ntype DataTypeBase64 = { base64: string };\n\ntype DataType =\n  | DataTypeString\n  | DataTypeUri\n  | DataTypeFormData\n  | DataTypeBlob\n  | DataTypeBase64;\n\nexport type RCTRequest = {\n  data: DataType,\n  headers: Object,\n  incrementalUpdates: boolean,\n  method: string,\n  responseType: \"base64\" | \"blob\" | \"text\",\n  timeout: number,\n  url: string,\n  withCredentials: boolean\n};\n\nexport interface RCTNetworkingRequestHandler {\n  canHandleNetworkingRequest(data: Object): boolean;\n  handleNetworkingRequest(data: Object): Object;\n}\n\nexport interface RCTNetworkingResponseHandler {\n  canHandleNetworkingResponse(responseType: string): boolean;\n  handleNetworkingResponse(response: RCTHttpRequest, data: any): Object;\n}\n\nexport type RCTHttpRequest = XMLHttpRequest & { requestId: number };\n\nfunction parseHttpHeaders(httpHeaders: ?string) {\n  if (httpHeaders == null) return {};\n  return httpHeaders\n    .split(\"\\n\")\n    .map((x) => x.split(/: */, 2))\n    .filter((x) => x[0])\n    .reduce((ac, x) => {\n      ac[x[0]] = x[1];\n      return ac;\n    }, {});\n}\n\nlet requestIdCounter = 0;\n\nclass RCTNetworkingNative extends RCTEventEmitter {\n  static moduleName = \"RCTNetworking\";\n\n  requestStore: { [id: number]: RCTHttpRequest } = {};\n\n  requestHandlers: RCTNetworkingRequestHandler[];\n  responseHandlers: RCTNetworkingResponseHandler[];\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.requestHandlers = [];\n    this.responseHandlers = [];\n  }\n\n  supportedMethods() {\n    return [\n      \"didCompleteNetworkResponse\",\n      \"didReceiveNetworkResponse\",\n      \"didSendNetworkData\",\n      \"didReceiveNetworkIncrementalData\",\n      \"didReceiveNetworkDataProgress\",\n      \"didReceiveNetworkData\"\n    ];\n  }\n\n  sendData(request: RCTHttpRequest, responseType: string) {\n    for (const handler of this.responseHandlers) {\n      if (handler.canHandleNetworkingResponse(responseType)) {\n        const responseData = handler.handleNetworkingResponse(\n          request,\n          request.response\n        );\n        return this.sendEventWithName(\"didReceiveNetworkData\", [\n          request.requestId,\n          responseData\n        ]);\n      }\n    }\n\n    let responseData: any = undefined;\n    if (responseType === \"text\" && typeof request.response === \"string\") {\n      responseData = request.response;\n    } else if (\n      responseType === \"text\" &&\n      typeof request.response === \"object\"\n    ) {\n      responseData = JSON.stringify(request.response);\n    } else {\n      console.warn(`Invalid responseType ${responseType}`);\n      return;\n    }\n\n    this.sendEventWithName(\"didReceiveNetworkData\", [\n      request.requestId,\n      responseData\n    ]);\n  }\n\n  handleLoadEnd = (request: RCTHttpRequest) => () => {\n    const responseURL = request.responseURL;\n    const headers = parseHttpHeaders(request.getAllResponseHeaders());\n    const status = request.status;\n\n    const responseJSON = [request.requestId, status, headers, responseURL];\n    this.sendEventWithName(\"didReceiveNetworkResponse\", responseJSON);\n  };\n\n  handleLoad = (request: RCTHttpRequest, responseType: string) => () => {\n    this.sendData(request, responseType);\n\n    // requestId, errorDescription, timed-out\n    const completeJSON = [request.requestId, null, false];\n    this.sendEventWithName(\"didCompleteNetworkResponse\", completeJSON);\n    delete this.requestStore[request.requestId];\n  };\n\n  handleError = (request: RCTHttpRequest) => () => {\n    // TODO: Implement\n  };\n\n  handleAbort = (request: RCTHttpRequest) => () => {\n    // TODO: Implement\n  };\n\n  $sendRequest(query: RCTRequest, callbackId: number) {\n    const {\n      data,\n      method,\n      url,\n      withCredentials,\n      timeout,\n      headers,\n      responseType\n    } = query;\n\n    const requestId = requestIdCounter++;\n    const req: RCTHttpRequest = Object.assign((new XMLHttpRequest(): Object), {\n      requestId\n    });\n    this.requestStore[requestId] = req;\n\n    req.open(method, url);\n    req.withCredentials = withCredentials;\n    req.timeout = timeout;\n    req.responseType = responseType;\n\n    req.addEventListener(\"load\", this.handleLoad(req, responseType));\n    req.addEventListener(\"loadend\", this.handleLoadEnd(req));\n\n    Object.entries(headers).forEach(([header, value]: [string, any]) => {\n      req.setRequestHeader(header, value);\n    });\n\n    let body: ?any;\n    for (const handler of this.requestHandlers) {\n      if (handler.canHandleNetworkingRequest(query)) {\n        const { body: tempBody, contentType } = handler.handleNetworkingRequest(\n          query\n        );\n        if (tempBody) {\n          body = tempBody;\n          req.setRequestHeader(\"Content-Type\", contentType);\n          break;\n        }\n      }\n    }\n\n    if (data.string) {\n      body = data.string;\n    }\n\n    if (data.base64) {\n      body = data.base64;\n    }\n\n    req.send(body);\n\n    this.bridge.callbackFromId(callbackId)(requestId);\n  }\n\n  $abortRequest(requestId: number) {\n    // TODO: Implement\n    console.log(\"abortRequest\", requestId);\n  }\n\n  $clearCookies(callbackId: number) {\n    // TODO: Implement\n    console.log(\"clearCookies\");\n  }\n\n  addRequestHandler(handler: RCTNetworkingRequestHandler) {\n    this.requestHandlers.push(handler);\n  }\n\n  addResponseHandler(handler: RCTNetworkingResponseHandler) {\n    this.responseHandlers.push(handler);\n  }\n\n  removeRequestHandler(handler: RCTNetworkingRequestHandler) {\n    const index = this.requestHandlers.indexOf(handler);\n    if (index !== -1) {\n      this.requestHandlers.splice(index, 1);\n    }\n  }\n\n  removeResponseHandler(handler: RCTNetworkingResponseHandler) {\n    const index = this.responseHandlers.indexOf(handler);\n    if (index !== -1) {\n      this.responseHandlers.splice(index, 1);\n    }\n  }\n}\n\nexport default RCTNetworkingNative;\n"],"file":"RCTNetworkingNative.js"}