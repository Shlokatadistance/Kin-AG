{"version":3,"sources":["../../ReactDom/modules/RCTHistory.js"],"names":["RCTHistory","bridge","handleHistoryChange","location","sendEventWithName","history","basename","hashType","unlisten","listen","cb","path","push","goBack","initialLocation","search","pathname","hash","RCTEventEmitter","moduleName"],"mappings":"6nBAEA,oFAIA,iEAEA,sFACA,wE,GAGMA,CAAAA,U,gFAMJ,oBAAYC,MAAZ,CAA+B,yDAC7B,sGAAMA,MAAN,GAD6B,MAgB/BC,mBAhB+B,CAgBT,SAACC,QAAD,CAA2B,CAC/C,MAAKC,iBAAL,CAAuB,SAAvB,CAAkC,CAAED,QAAQ,CAARA,QAAF,CAAlC,EACD,CAlB8B,CAE7B,MAAKE,OAAL,CAAe,+BAAc,CAC3BC,QAAQ,CAAEL,MAAM,CAACK,QADU,CAE3BC,QAAQ,CAAE,OAFiB,CAAd,CAAf,CAF6B,aAM9B,C,2FAEgB,CACf,KAAKC,QAAL,CAAgB,KAAKH,OAAL,CAAaI,MAAb,CAAoB,KAAKP,mBAAzB,CAAhB,CACD,C,qDAEe,CACd,KAAKM,QAAL,EAAiB,KAAKA,QAAL,EAAjB,CACD,C,yDAMiB,CAChB,MAAO,CAAC,SAAD,CAAP,CACD,C,sCASME,E,CAAc,CACnB,MAAO,MAAKL,OAAL,CAAaI,MAAb,CAAoBC,EAApB,CAAP,CACD,C,oCAEKC,I,CAAc,CAClB,KAAKN,OAAL,CAAaO,IAAb,CAAkBD,IAAlB,EACD,C,yCAES,CACR,KAAKN,OAAL,CAAaQ,MAAb,GACD,C,6DAEmB,CAClB,MAAO,CACLC,eAAe,CAAE,KAAKT,OAAL,CAAaF,QADzB,CAAP,CAGD,C,sCAvBgB,CACf,GAAI,KAAKE,OAAT,CAAkB,2BACmB,KAAKA,OAAL,CAAaF,QADhC,CACRY,MADQ,uBACRA,MADQ,CACAC,QADA,uBACAA,QADA,CACUC,IADV,uBACUA,IADV,CAEhB,SAAUD,QAAV,CAAqBD,MAArB,CAA8BE,IAA9B,CACD,CACF,C,wBAnCsBC,8B,EAAnBlB,U,CACGmB,U,CAAa,Y,cAuDPnB,U","sourcesContent":["/** @flow */\n\nimport createHistory, {\n  type HashHistory,\n  type HashLocation\n} from \"history/createHashHistory\";\nimport queryString from \"query-string\";\n\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\n\nclass RCTHistory extends RCTEventEmitter {\n  static moduleName = \"RCTHistory\";\n\n  history: HashHistory;\n  unlisten: ?Function;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.history = createHistory({\n      basename: bridge.basename,\n      hashType: \"slash\"\n    });\n  }\n\n  startObserving() {\n    this.unlisten = this.history.listen(this.handleHistoryChange);\n  }\n\n  stopObserving() {\n    this.unlisten && this.unlisten();\n  }\n\n  handleHistoryChange = (location: HashHistory) => {\n    this.sendEventWithName(\"history\", { location });\n  };\n\n  supportedEvents() {\n    return [\"history\"];\n  }\n\n  get currentUrl() {\n    if (this.history) {\n      const { search, pathname, hash } = this.history.location;\n      return `${pathname}${search}${hash}`;\n    }\n  }\n\n  listen(cb: Function) {\n    return this.history.listen(cb);\n  }\n\n  $push(path: string) {\n    this.history.push(path);\n  }\n\n  $goBack() {\n    this.history.goBack();\n  }\n\n  constantsToExport() {\n    return {\n      initialLocation: this.history.location\n    };\n  }\n}\n\nexport default RCTHistory;\n"],"file":"RCTHistory.js"}