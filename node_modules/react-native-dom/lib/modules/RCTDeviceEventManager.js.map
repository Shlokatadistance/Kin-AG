{"version":3,"sources":["../../ReactDom/modules/RCTDeviceEventManager.js"],"names":["RCTDeviceEventManager","bridge","dispatcher","eventDispatcher","history","getModuleByName","setupBackHandler","$goBack","RCTModule","moduleName"],"mappings":"6nBAEA,yE,GAKMA,CAAAA,qB,+EAMJ,+BAAYC,MAAZ,CAA+B,oEAC7B,iHAAMA,MAAN,GACA,MAAKC,UAAL,CAAkBD,MAAM,CAACE,eAAzB,CACA,MAAKC,OAAL,CAAeH,MAAM,CAACI,eAAP,CAAuB,SAAvB,CAAf,CACA,MAAKC,gBAAL,GAJ6B,aAK9B,C,0GAGkB,CAMlB,C,uFAEgC,CAC/B,KAAKF,OAAL,CAAaG,OAAb,GACD,C,mCAxBiCC,mB,EAA9BR,qB,CACGS,U,CAAa,uB,cA0BPT,qB","sourcesContent":["/** @flow */\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\nimport type RCTEventDispatcher from \"RCTEventDispatcher\";\nimport type RCTHistory from \"RCTHistory\";\n\nclass RCTDeviceEventManager extends RCTModule {\n  static moduleName = \"RCTDeviceEventManager\";\n\n  dispatcher: RCTEventDispatcher;\n  history: RCTHistory;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.dispatcher = bridge.eventDispatcher;\n    this.history = bridge.getModuleByName(\"History\");\n    this.setupBackHandler();\n  }\n\n  // TODO: Determine if this is necessary or not\n  setupBackHandler() {\n    //   this.history.listen((location, action) => {\n    //     if (action === \"POP\") {\n    //       this.dispatcher.sendDeviceEvent(\"hardwareBackPress\");\n    //     }\n    //   });\n  }\n\n  $invokeDefaultBackPressHandler() {\n    this.history.$goBack();\n  }\n}\n\nexport default RCTDeviceEventManager;\n"],"file":"RCTDeviceEventManager.js"}