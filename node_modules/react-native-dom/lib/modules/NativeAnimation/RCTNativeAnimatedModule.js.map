{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTNativeAnimatedModule.js"],"names":["RCTNativeAnimatedModule","bridge","uiManagerWillFlushBlocks","uiManager","preOperations","length","operations","prependUIBlock","operation","nodesManager","addUIBlock","updateAnimations","RCTNativeAnimatedNodesManager","eventDispatcher","addDispatchObserver","observerCoordinator","addObserver","tag","config","addOperationBlock","createAnimatedNode","parentTag","childTag","connectAnimatedNodes","disconnectAnimatedNodes","animationId","nodeTag","endCallbackId","endCallback","callbackFromId","startAnimatingNode","stopAnimation","value","setAnimatedNodeValue","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","viewTag","viewName","viewNameForReactTag","connectAnimatedNodeToView","addPreOperationBlock","disconnectAnimatedNodeFromView","dropAnimatedNode","valueObserver","addListener","startListeningToAnimatedNodeValue","removeListener","stopListeningToAnimatedNodeValue","eventName","eventMapping","addAnimatedEventToView","animatedNodeTag","removeAnimatedEventFromView","push","node","sendEventWithName","event","handleAnimatedEvent","RCTEventEmitter","moduleName"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\nimport type { RCTEvent } from \"RCTEventDispatcher\";\nimport type RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport RCTNativeAnimatedNodesManager from \"RCTNativeAnimatedNodesManager\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\nexport type Config = Object;\ntype AnimatedOperation = (nodesManager: RCTNativeAnimatedNodesManager) => void;\n\nclass RCTNativeAnimatedModule extends RCTEventEmitter {\n  static moduleName = \"RCTNativeAnimatedModule\";\n\n  bridge: RCTBridge;\n\n  nodesManager: RCTNativeAnimatedNodesManager;\n  operations: AnimatedOperation[];\n  preOperations: AnimatedOperation[];\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.bridge = bridge;\n    this.nodesManager = new RCTNativeAnimatedNodesManager(\n      this.bridge.uiManager\n    );\n\n    this.operations = [];\n    this.preOperations = [];\n\n    this.bridge.eventDispatcher.addDispatchObserver(this);\n    this.bridge.uiManager.observerCoordinator.addObserver(this);\n  }\n\n  $createAnimatedNode(tag: number, config: Config) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.createAnimatedNode(tag, config);\n    });\n  }\n\n  $connectAnimatedNodes(parentTag: number, childTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.connectAnimatedNodes(parentTag, childTag);\n    });\n  }\n\n  $disconnectAnimatedNodes(parentTag: number, childTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.disconnectAnimatedNodes(parentTag, childTag);\n    });\n  }\n\n  $startAnimatingNode(\n    animationId: number,\n    nodeTag: number,\n    config: Config,\n    endCallbackId: number\n  ) {\n    const endCallback = this.bridge.callbackFromId(endCallbackId);\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.startAnimatingNode(\n        animationId,\n        nodeTag,\n        config,\n        endCallback\n      );\n    });\n  }\n\n  $stopAnimation(animationId: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.stopAnimation(animationId);\n    });\n  }\n\n  $setAnimatedNodeValue(nodeTag: number, value: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.setAnimatedNodeValue(nodeTag, value);\n    });\n  }\n\n  $setAnimatedNodeOffset(nodeTag: number, offset: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.setAnimatedNodeOffset(nodeTag, offset);\n    });\n  }\n\n  $flattenAnimatedNodeOffset(nodeTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.flattenAnimatedNodeOffset(nodeTag);\n    });\n  }\n\n  $extractAnimatedNodeOffset(nodeTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.extractAnimatedNodeOffset(nodeTag);\n    });\n  }\n\n  $connectAnimatedNodeToView(nodeTag: number, viewTag: number) {\n    const viewName = this.bridge.uiManager.viewNameForReactTag(viewTag);\n    invariant(viewName, `No such viewName for react tag ${viewTag}`);\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.connectAnimatedNodeToView(nodeTag, viewTag, viewName);\n    });\n  }\n\n  $disconnectAnimatedNodeFromView(nodeTag: number, viewTag: number) {\n    // Disconnecting a view also restores its default values so we have to make\n    // sure this happens before views get updated with their new props. This is\n    // why we enqueue this on the pre-operations queue.\n    this.addPreOperationBlock((nodesManager) => {\n      nodesManager.disconnectAnimatedNodeFromView(nodeTag, viewTag);\n    });\n  }\n\n  $dropAnimatedNode(tag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.dropAnimatedNode(tag);\n    });\n  }\n\n  $startListeningToAnimatedNodeValue(tag: number) {\n    const valueObserver = this;\n    this.addOperationBlock((nodesManager) => {\n      this.addListener(\"onAnimatedValueUpdate\");\n      nodesManager.startListeningToAnimatedNodeValue(tag, valueObserver);\n    });\n  }\n\n  $stopListeningToAnimatedNodeValue(tag: number) {\n    this.addOperationBlock((nodesManager) => {\n      this.removeListener(\"onAnimatedValueUpdate\");\n      nodesManager.stopListeningToAnimatedNodeValue(tag);\n    });\n  }\n\n  $addAnimatedEventToView(\n    viewTag: number,\n    eventName: string,\n    eventMapping: Object\n  ) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.addAnimatedEventToView(viewTag, eventName, eventMapping);\n    });\n  }\n\n  $removeAnimatedEventFromView(\n    viewTag: number,\n    eventName: string,\n    animatedNodeTag: number\n  ) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.removeAnimatedEventFromView(\n        viewTag,\n        eventName,\n        animatedNodeTag\n      );\n    });\n  }\n\n  addOperationBlock(operation: AnimatedOperation) {\n    this.operations.push(operation);\n  }\n\n  addPreOperationBlock(operation: AnimatedOperation) {\n    this.preOperations.push(operation);\n  }\n\n  uiManagerWillFlushBlocks = (uiManager: *) => {\n    if (this.preOperations.length === 0 && this.operations.length === 0) {\n      return;\n    }\n\n    const preOperations = [...this.preOperations];\n    this.preOperations = [];\n    const operations = [...this.operations];\n    this.operations = [];\n\n    uiManager.prependUIBlock(() => {\n      for (let operation of preOperations) {\n        operation(this.nodesManager);\n      }\n    });\n\n    uiManager.addUIBlock(() => {\n      for (let operation of operations) {\n        operation(this.nodesManager);\n      }\n      this.nodesManager.updateAnimations();\n    });\n  };\n\n  supportedEvents() {\n    return [\"onAnimatedValueUpdate\"];\n  }\n\n  animatedNodeDidUpdateValue(node: RCTValueAnimatedNode, value: number) {\n    this.sendEventWithName(\"onAnimatedValueUpdate\", {\n      tag: node.nodeTag,\n      value\n    });\n  }\n\n  eventDispatcherWillDispatchEvent(event: RCTEvent) {\n    this.nodesManager.handleAnimatedEvent(event);\n  }\n}\n\nexport default RCTNativeAnimatedModule;\n"],"file":"RCTNativeAnimatedModule.js"}