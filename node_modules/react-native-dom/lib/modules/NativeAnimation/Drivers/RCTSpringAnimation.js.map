{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Drivers/RCTSpringAnimation.js"],"names":["MAX_DELTA_TIME","RCTSpringAnimation","animationId","config","valueNode","callback","iterations","toValue","fromValue","value","lastPosition","overshootClamping","restDisplacementThreshold","restSpeedThreshold","stiffness","damping","mass","initialVelocity","lastVelocity","animationHasFinished","currentLoop","animationStartTime","animationCurrentTime","animationHasBegun","finished","currentTime","deltaTime","_t","curDeltaTime","Math","min","c","m","k","v0","zeta","sqrt","omega0","omega1","x0","position","velocity","envelope","exp","sin","cos","onUpdate","isOvershooting","isVelocity","abs","isDisplacement","outputValue","setNeedsUpdate"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport type { RCTAnimationDriver } from \"RCTAnimationDriver\";\nimport type RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport { RCTSingleFrameInterval } from \"RCTAnimationDriver\";\n\nconst MAX_DELTA_TIME: number = 0.064;\n\nclass RCTSpringAnimation implements RCTAnimationDriver {\n  animationId: number;\n  valueNode: RCTValueAnimatedNode;\n  animationHasBegun: boolean;\n  animationHasFinished: boolean;\n\n  toValue: number;\n  fromValue: number;\n  overshootClamping: boolean;\n  restDisplacementThreshold: number;\n  restSpeedThreshold: number;\n  stiffness: number;\n  damping: number;\n  mass: number;\n  initialVelocity: number;\n  animationStartTime: number;\n  animationCurrentTime: number;\n  callback: ?Function;\n\n  lastPosition: number;\n  lastVelocity: number;\n\n  iterations: number;\n  currentLoop: number;\n\n  _t: number;\n\n  constructor(\n    animationId: number,\n    config: Config,\n    valueNode: RCTValueAnimatedNode,\n    callback: ?Function\n  ) {\n    const iterations = config.iterations != null ? config.iterations : 1;\n\n    this.animationId = animationId;\n    this.toValue = config.toValue;\n    this.fromValue = valueNode.value;\n    this.lastPosition = 0;\n    this.valueNode = valueNode;\n    this.overshootClamping = config.overshootClamping;\n    this.restDisplacementThreshold = config.restDisplacementThreshold;\n    this.restSpeedThreshold = config.restSpeedThreshold;\n    this.stiffness = config.stiffness;\n    this.damping = config.damping;\n    this.mass = config.mass;\n    this.initialVelocity = config.initialVelocity;\n    this.callback = callback;\n\n    this.lastPosition = this.fromValue;\n    this.lastVelocity = this.initialVelocity;\n\n    this.animationHasFinished = iterations === 0;\n    this.iterations = iterations;\n    this.currentLoop = 1;\n    return this;\n  }\n\n  startAnimation() {\n    this.animationStartTime = this.animationCurrentTime = -1;\n    this.animationHasBegun = true;\n  }\n\n  stopAnimation() {\n    if (this.callback) {\n      this.callback({ finished: this.animationHasFinished });\n    }\n  }\n\n  stepAnimationWithTime(currentTime: number) {\n    if (!this.animationHasBegun || this.animationHasFinished) {\n      return;\n    }\n\n    let deltaTime;\n    if (this.animationStartTime === -1) {\n      this._t = 0.0;\n      this.animationStartTime = currentTime;\n      deltaTime = 0.0;\n    } else {\n      // need to adjust the delta time to be in seconds\n      const curDeltaTime = (currentTime - this.animationCurrentTime) / 1000;\n      // Handle frame drops, and only advance dt by a max of MAX_DELTA_TIME\n      deltaTime = Math.min(MAX_DELTA_TIME, curDeltaTime);\n      this._t += deltaTime;\n    }\n\n    // store the timestamp\n    this.animationCurrentTime = currentTime;\n\n    const c = this.damping;\n    const m = this.mass;\n    const k = this.stiffness;\n    const v0 = -this.initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this.toValue - this.fromValue; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position;\n    let velocity;\n\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * this._t);\n      position =\n        this.toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * this._t) +\n            x0 * Math.cos(omega1 * this._t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * this._t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * this._t)) -\n        envelope *\n          (Math.cos(omega1 * this._t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * this._t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * this._t);\n      position = this.toValue - envelope * (x0 + (v0 + omega0 * x0) * this._t);\n      velocity =\n        envelope *\n        (v0 * (this._t * omega0 - 1) + this._t * x0 * (omega0 * omega0));\n    }\n\n    this.lastPosition = position;\n    this.lastVelocity = velocity;\n\n    this.onUpdate(position);\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this.overshootClamping && this.stiffness !== 0) {\n      if (this.fromValue < this.toValue) {\n        isOvershooting = position > this.toValue;\n      } else {\n        isOvershooting = position < this.toValue;\n      }\n    }\n\n    let isVelocity = Math.abs(velocity) <= this.restSpeedThreshold;\n    let isDisplacement = true;\n    if (this.stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this.toValue - position) <= this.restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this.stiffness !== 0) {\n        // Ensure that we end up with a round value\n        if (this.animationHasFinished) {\n          return;\n        }\n        this.onUpdate(this.toValue);\n      }\n\n      if (this.iterations === -1 || this.currentLoop < this.iterations) {\n        this.lastPosition = this.fromValue;\n        this.lastVelocity = this.initialVelocity;\n        this.animationStartTime = -1;\n        this.currentLoop++;\n        this.onUpdate(this.fromValue);\n      } else {\n        this.animationHasFinished = true;\n      }\n    }\n  }\n\n  onUpdate(outputValue: number) {\n    this.valueNode.value = outputValue;\n    this.valueNode.setNeedsUpdate();\n  }\n}\n\nexport default RCTSpringAnimation;\n"],"file":"RCTSpringAnimation.js"}