{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTNativeAnimatedNodesManager.js"],"names":["NODE_TYPE_MAP","style","RCTStyleAnimatedNode","value","RCTValueAnimatedNode","props","RCTPropsAnimatedNode","interpolation","RCTInterpolationAnimatedNode","transform","RCTTransformAnimatedNode","multiplication","RCTMultiplicationAnimatedNode","addition","RCTAdditionAnimatedNode","subtraction","RCTSubtractionAnimatedNode","modulus","RCTModuloAnimatedNode","division","RCTDivisionAnimatedNode","tracking","RCTTrackingAnimatedNode","DRIVER_TYPE_MAP","frames","RCTFrameAnimation","decay","RCTDecayAnimation","spring","RCTSpringAnimation","RCTNativeAnimatedNodesManager","uiManager","animationNodes","eventDrivers","activeAnimations","Set","ticking","tag","config","nodeType","type","NodeClass","console","error","node","manager","setNeedsUpdate","parentTag","childTag","parentNode","childNode","addChild","removeChild","nodeTag","viewTag","viewName","connectToView","disconnectFromView","detachNode","stopAnimationsForNode","offset","flattenOffset","extractOffset","animationId","endCallback","valueNode","AnimationDriverClass","animationDriver","add","startAnimation","startAnimationLoopIfNeeded","driver","stopAnimation","delete","discarded","forEach","push","eventName","eventMapping","animatedValueTag","eventPath","nativeEventPath","RCTEventAnimation","key","animatedNodeTag","length","driversForKey","i","splice","event","Object","keys","updateWithEvent","updateAnimations","valueObserver","size","window","requestAnimationFrame","stepAnimations","bind","timestamp","stepAnimationWithTime","animationHasFinished","stopAnimationLoopIfNeeded","values","needsUpdate","updateNodeIfNecessary"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport type { RCTEvent } from \"RCTEventDispatcher\";\nimport type { RCTAnimationDriver } from \"RCTAnimationDriver\";\nimport type { RCTValueAnimatedNodeObserver } from \"RCTValueAnimatedNode\";\nimport RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport RCTPropsAnimatedNode from \"RCTPropsAnimatedNode\";\nimport RCTStyleAnimatedNode from \"RCTStyleAnimatedNode\";\nimport RCTInterpolationAnimatedNode from \"RCTInterpolationAnimatedNode\";\nimport RCTTransformAnimatedNode from \"RCTTransformAnimatedNode\";\nimport RCTMultiplicationAnimatedNode from \"RCTMultiplicationAnimatedNode\";\nimport RCTAdditionAnimatedNode from \"RCTAdditionAnimatedNode\";\nimport RCTSubtractionAnimatedNode from \"RCTSubtractionAnimatedNode\";\nimport RCTModuloAnimatedNode from \"RCTModuloAnimatedNode\";\nimport RCTDivisionAnimatedNode from \"RCTDivisionAnimatedNode\";\nimport RCTTrackingAnimatedNode from \"RCTTrackingAnimatedNode\";\nimport RCTEventAnimation from \"RCTEventAnimation\";\nimport RCTFrameAnimation from \"RCTFrameAnimation\";\nimport RCTDecayAnimation from \"RCTDecayAnimation\";\nimport RCTSpringAnimation from \"RCTSpringAnimation\";\nimport type RCTUIManager from \"RCTUIManager\";\n\nconst NODE_TYPE_MAP: { [typeName: string]: Class<RCTAnimatedNode> } = {\n  style: RCTStyleAnimatedNode,\n  value: RCTValueAnimatedNode,\n  props: RCTPropsAnimatedNode,\n  interpolation: RCTInterpolationAnimatedNode,\n  transform: RCTTransformAnimatedNode,\n  multiplication: RCTMultiplicationAnimatedNode,\n  addition: RCTAdditionAnimatedNode,\n  subtraction: RCTSubtractionAnimatedNode,\n  modulus: RCTModuloAnimatedNode,\n  division: RCTDivisionAnimatedNode,\n  tracking: RCTTrackingAnimatedNode\n};\n\nconst DRIVER_TYPE_MAP: { [typeName: string]: Class<RCTAnimationDriver> } = {\n  frames: RCTFrameAnimation,\n  decay: RCTDecayAnimation,\n  spring: RCTSpringAnimation\n};\n\nclass RCTNativeAnimatedNodesManager {\n  uiManager: RCTUIManager;\n\n  animationNodes: { [nodeTag: number]: RCTAnimatedNode };\n  eventDrivers: { [key: string]: RCTEventAnimation[] };\n  activeAnimations: Set<RCTAnimationDriver>;\n\n  ticking: boolean;\n\n  constructor(uiManager: RCTUIManager) {\n    this.uiManager = uiManager;\n    this.animationNodes = {};\n    this.eventDrivers = {};\n    this.activeAnimations = new Set();\n    this.ticking = false;\n  }\n\n  // -- Graph\n\n  createAnimatedNode(tag: number, config: Config) {\n    const nodeType = config.type;\n\n    const NodeClass = NODE_TYPE_MAP[nodeType];\n    if (!NodeClass) {\n      console.error(`Animated node type ${nodeType} not supported natively`);\n      return;\n    }\n\n    const node = new NodeClass(tag, config);\n    node.manager = this;\n    this.animationNodes[tag] = node;\n    node.setNeedsUpdate();\n  }\n\n  connectAnimatedNodes(parentTag: number, childTag: number) {\n    const parentNode = this.animationNodes[parentTag];\n    const childNode = this.animationNodes[childTag];\n\n    invariant(parentNode, `no such parent node with id ${parentTag}`);\n    invariant(childNode, `no such child node with id ${childTag}`);\n\n    parentNode.addChild(childNode);\n    childNode.setNeedsUpdate();\n  }\n\n  disconnectAnimatedNodes(parentTag: number, childTag: number) {\n    const parentNode = this.animationNodes[parentTag];\n    const childNode = this.animationNodes[childTag];\n\n    invariant(parentNode, `no such parent node with id ${parentTag}`);\n    invariant(childNode, `no such child node with id ${childTag}`);\n\n    parentNode.removeChild(childNode);\n    childNode.setNeedsUpdate();\n  }\n\n  connectAnimatedNodeToView(\n    nodeTag: number,\n    viewTag: number,\n    viewName: string\n  ) {\n    const node = this.animationNodes[nodeTag];\n    if (node instanceof RCTPropsAnimatedNode) {\n      node.connectToView(viewTag, viewName, this.uiManager);\n    }\n    node.setNeedsUpdate();\n  }\n\n  disconnectAnimatedNodeFromView(nodeTag: number, viewTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (node instanceof RCTPropsAnimatedNode) {\n      node.disconnectFromView(viewTag);\n    }\n  }\n\n  dropAnimatedNode(tag: number) {\n    const node = this.animationNodes[tag];\n    if (node) {\n      node.detachNode();\n      delete this.animationNodes[tag];\n    }\n  }\n\n  // -- Mutations\n\n  setAnimatedNodeValue(nodeTag: number, value: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    this.stopAnimationsForNode(node);\n\n    node.value = value;\n    node.setNeedsUpdate();\n  }\n\n  setAnimatedNodeOffset(nodeTag: number, offset: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.offset = offset;\n    node.setNeedsUpdate();\n  }\n\n  flattenAnimatedNodeOffset(nodeTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.flattenOffset();\n  }\n\n  extractAnimatedNodeOffset(nodeTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.extractOffset();\n  }\n\n  // -- Drivers\n\n  startAnimatingNode(\n    animationId: number,\n    nodeTag: number,\n    config: Config,\n    endCallback: ?Function\n  ) {\n    const valueNode = this.animationNodes[nodeTag];\n    invariant(\n      valueNode instanceof RCTValueAnimatedNode,\n      `Animation Node of id ${nodeTag} is not a ValueAnimatedNode`\n    );\n\n    const AnimationDriverClass = DRIVER_TYPE_MAP[config.type];\n    if (AnimationDriverClass == null) {\n      console.error(`Unsupported animation type: ${config.type}`);\n      return;\n    }\n\n    const animationDriver = new AnimationDriverClass(\n      animationId,\n      config,\n      valueNode,\n      endCallback\n    );\n\n    this.activeAnimations.add(animationDriver);\n    animationDriver.startAnimation();\n    this.startAnimationLoopIfNeeded();\n  }\n\n  stopAnimation(animationId: number) {\n    for (let driver of this.activeAnimations) {\n      if (driver.animationId === animationId) {\n        driver.stopAnimation();\n        this.activeAnimations.delete(driver);\n        break;\n      }\n    }\n  }\n\n  stopAnimationsForNode(node: RCTAnimatedNode) {\n    const discarded: RCTAnimationDriver[] = [];\n    this.activeAnimations.forEach((driver) => {\n      if (driver.valueNode === node) {\n        discarded.push(driver);\n      }\n    });\n\n    discarded.forEach((driver) => {\n      driver.stopAnimation();\n      this.activeAnimations.delete(driver);\n    });\n  }\n\n  // -- Events\n\n  addAnimatedEventToView(\n    viewTag: number,\n    eventName: string,\n    eventMapping: Object\n  ) {\n    const nodeTag: number = eventMapping.animatedValueTag;\n    const node = this.animationNodes[nodeTag];\n\n    if (!node) {\n      console.error(`Animated node with tag ${nodeTag} does not exist`);\n      return;\n    }\n\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\n        \"Animated node connected to event should be of type RCTValueAnimatedNode\"\n      );\n      return;\n    }\n\n    const eventPath: string[] = eventMapping.nativeEventPath;\n\n    const driver = new RCTEventAnimation(eventPath, node);\n\n    const key = `${viewTag}${eventName}`;\n    if (this.eventDrivers[key] != null) {\n      this.eventDrivers[key].push(driver);\n    } else {\n      this.eventDrivers[key] = [driver];\n    }\n  }\n\n  removeAnimatedEventFromView(\n    viewTag: number,\n    eventName: string,\n    animatedNodeTag: number\n  ) {\n    const key = `${viewTag}${eventName}`;\n    if (this.eventDrivers[key] != null) {\n      if (this.eventDrivers[key].length === 1) {\n        delete this.eventDrivers[key];\n      } else {\n        const driversForKey = this.eventDrivers[key];\n        for (let i = 0; i < driversForKey.length; i++) {\n          if (driversForKey[i].valueNode.nodeTag === animatedNodeTag) {\n            this.eventDrivers[key].splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  handleAnimatedEvent(event: RCTEvent) {\n    if (Object.keys(this.eventDrivers).length === 0) {\n      return;\n    }\n\n    const key = `${event.viewTag}${event.eventName}`;\n    const driversForKey = this.eventDrivers[key];\n\n    if (driversForKey) {\n      for (let driver of driversForKey) {\n        this.stopAnimationsForNode(driver.valueNode);\n        driver.updateWithEvent(event);\n      }\n\n      this.updateAnimations();\n    }\n  }\n\n  // -- Listeners\n\n  startListeningToAnimatedNodeValue(\n    tag: number,\n    valueObserver: RCTValueAnimatedNodeObserver\n  ) {\n    const node = this.animationNodes[tag];\n    if (node instanceof RCTValueAnimatedNode) {\n      node.valueObserver = valueObserver;\n    }\n  }\n\n  stopListeningToAnimatedNodeValue(tag: number) {\n    const node = this.animationNodes[tag];\n    if (node instanceof RCTValueAnimatedNode) {\n      node.valueObserver = null;\n    }\n  }\n\n  // -- Animation Loop\n  // TODO: Don't hook into RAF and instead declaritively use WAAPI\n\n  startAnimationLoopIfNeeded() {\n    if (!this.ticking && this.activeAnimations.size > 0) {\n      window.requestAnimationFrame(this.stepAnimations.bind(this));\n      this.ticking = true;\n    }\n  }\n\n  stepAnimations(timestamp: number) {\n    for (let animationDriver of this.activeAnimations) {\n      animationDriver.stepAnimationWithTime(timestamp);\n    }\n\n    this.updateAnimations();\n\n    for (let animationDriver of this.activeAnimations) {\n      if (animationDriver.animationHasFinished) {\n        animationDriver.stopAnimation();\n        this.activeAnimations.delete(animationDriver);\n      }\n    }\n\n    this.stopAnimationLoopIfNeeded();\n  }\n\n  stopAnimationLoopIfNeeded() {\n    this.ticking = false;\n\n    // If there are still active animations continue to next frame\n    if (this.activeAnimations.size !== 0) {\n      this.startAnimationLoopIfNeeded();\n    }\n  }\n\n  // -- Updates\n\n  updateAnimations() {\n    // $FlowFixMe\n    Object.values(this.animationNodes).forEach((node: RCTAnimatedNode) => {\n      if (node.needsUpdate) {\n        node.updateNodeIfNecessary();\n      }\n    });\n  }\n}\n\nexport default RCTNativeAnimatedNodesManager;\n"],"file":"RCTNativeAnimatedNodesManager.js"}