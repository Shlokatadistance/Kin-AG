{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTInterpolationAnimatedNode.js"],"names":["RCTInterpolationAnimatedNode","tag","config","inputRange","outputRange","value","push","extrapolateLeft","extrapolateRight","parent","RCTValueAnimatedNode","parentNode","inputValue","outputValue","_value"],"mappings":"yyBAIA,qFACA,yD,GAEMA,CAAAA,4B,4GAOJ,sCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,2EACvC,wHAAMD,GAAN,CAAWC,MAAX,GAEA,MAAKC,UAAL,iCAAsBD,MAAM,CAACC,UAA7B,EACA,MAAKC,WAAL,CAAmB,EAAnB,CACA,kBAAkBF,MAAM,CAACE,WAAzB,4IAAsC,uIAA7BC,CAAAA,MAA6B,MACpC,GAAI,MAAOA,CAAAA,MAAP,GAAiB,QAArB,CAA+B,CAC7B,MAAKD,WAAL,CAAiBE,IAAjB,CAAsBD,MAAtB,EACD,CACF,CACD,MAAKE,eAAL,CAAuBL,MAAM,CAACK,eAA9B,CACA,MAAKC,gBAAL,CAAwBN,MAAM,CAACM,gBAA/B,CAXuC,aAYxC,C,gHAEgBC,M,CAAyB,CACxC,0HAAuBA,MAAvB,EACA,GAAIA,MAAM,WAAYC,+BAAtB,CAA4C,CAC1C,KAAKC,UAAL,CAAkBF,MAAlB,CACD,CACF,C,8DAEkBA,M,CAAyB,CAC1C,4HAAyBA,MAAzB,EACA,GAAI,KAAKE,UAAL,GAAoBF,MAAxB,CAAgC,CAC9B,KAAKE,UAAL,CAAkB,IAAlB,CACD,CACF,C,qDAEe,CACd,wHAEA,GAAMA,CAAAA,UAAU,CAAG,KAAKA,UAAxB,CACA,GAAI,CAACA,UAAL,CAAiB,CACf,OACD,CAED,GAAMC,CAAAA,UAAU,CAAGD,UAAU,CAACN,KAA9B,CAEA,GAAMQ,CAAAA,WAAW,CAAG,kDAClBD,UADkB,CAElB,KAAKT,UAFa,CAGlB,KAAKC,WAHa,CAIlB,KAAKG,eAJa,CAKlB,KAAKC,gBALa,CAApB,CAQA,KAAKM,MAAL,CAAcD,WAAd,CACD,C,0CAtDwCH,8B,eAyD5BV,4B","sourcesContent":["/** @flow */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport type RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport { RCTInterpolateValueInRange } from \"RCTAnimationUtils\";\n\nclass RCTInterpolationAnimatedNode extends RCTValueAnimatedNode {\n  parentNode: ?RCTValueAnimatedNode;\n  inputRange: number[];\n  outputRange: number[];\n  extrapolateLeft: string;\n  extrapolateRight: string;\n\n  constructor(tag: number, config: Config) {\n    super(tag, config);\n\n    this.inputRange = [...config.inputRange];\n    this.outputRange = [];\n    for (let value of config.outputRange) {\n      if (typeof value === \"number\") {\n        this.outputRange.push(value);\n      }\n    }\n    this.extrapolateLeft = config.extrapolateLeft;\n    this.extrapolateRight = config.extrapolateRight;\n  }\n\n  onAttachedToNode(parent: RCTAnimatedNode) {\n    super.onAttachedToNode(parent);\n    if (parent instanceof RCTValueAnimatedNode) {\n      this.parentNode = parent;\n    }\n  }\n\n  onDetachedFromNode(parent: RCTAnimatedNode) {\n    super.onDetachedFromNode(parent);\n    if (this.parentNode === parent) {\n      this.parentNode = null;\n    }\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const parentNode = this.parentNode;\n    if (!parentNode) {\n      return;\n    }\n\n    const inputValue = parentNode.value;\n\n    const outputValue = RCTInterpolateValueInRange(\n      inputValue,\n      this.inputRange,\n      this.outputRange,\n      this.extrapolateLeft,\n      this.extrapolateRight\n    );\n\n    this._value = outputValue;\n  }\n}\n\nexport default RCTInterpolationAnimatedNode;\n"],"file":"RCTInterpolationAnimatedNode.js"}