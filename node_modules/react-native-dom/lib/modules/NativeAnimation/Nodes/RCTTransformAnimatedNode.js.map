{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTTransformAnimatedNode.js"],"names":["RCTTransformAnimatedNode","tag","config","propsDictionary","transformConfigs","transforms","transform","transformConfig","type","property","value","nodeTag","node","parentNodes","RCTValueAnimatedNode","push","animatedTransform","RCTAnimatedNode"],"mappings":"myBAGA,oFACA,2E,GAEMA,CAAAA,wB,8FAGJ,kCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,uEACvC,oHAAMD,GAAN,CAAWC,MAAX,GACA,MAAKC,eAAL,CAAuB,EAAvB,CAFuC,aAGxC,C,uGAEe,CACd,oHAEA,GAAMC,CAAAA,gBAAgB,CAAG,KAAKF,MAAL,CAAYG,UAArC,CACA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CAEA,kBAA4BF,gBAA5B,4IAA8C,uIAArCG,CAAAA,gBAAqC,MAC5C,GAAMC,CAAAA,IAAI,CAAGD,gBAAe,CAACC,IAA7B,CACA,GAAMC,CAAAA,QAAQ,CAAGF,gBAAe,CAACE,QAAjC,CAEA,GAAIC,CAAAA,KAAK,OAAT,CACA,GAAIF,IAAI,GAAK,UAAb,CAAyB,CACvB,GAAMG,CAAAA,OAAO,CAAGJ,gBAAe,CAACI,OAAhC,CACA,GAAMC,CAAAA,IAAI,CAAG,KAAKC,WAAL,CAAmB,KAAKA,WAAL,CAAiBF,OAAjB,CAAnB,CAA+C,IAA5D,CACA,GAAI,EAAEC,IAAI,WAAYE,8BAAlB,CAAJ,CAA6C,CAC3C,SACD,CACDJ,KAAK,CAAGE,IAAI,CAACF,KAAb,CACD,CAPD,IAOO,CACLA,KAAK,CAAGH,gBAAe,CAACG,KAAxB,CACD,CACDJ,SAAS,CAACS,IAAV,iCAAkBN,QAAlB,CAA6BC,KAA7B,GACD,CAED,KAAKP,eAAL,CAAqBa,iBAArB,CAAyCV,SAAzC,CACD,C,sCAjCoCW,yB,eAoCxBjB,wB","sourcesContent":["/** @flow */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport RCTAnimatedNode from \"RCTAnimatedNode\";\n\nclass RCTTransformAnimatedNode extends RCTAnimatedNode {\n  propsDictionary: { [propName: string]: any };\n\n  constructor(tag: number, config: Config) {\n    super(tag, config);\n    this.propsDictionary = {};\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const transformConfigs = this.config.transforms;\n    const transform = [];\n\n    for (let transformConfig of transformConfigs) {\n      const type = transformConfig.type;\n      const property = transformConfig.property;\n\n      let value;\n      if (type === \"animated\") {\n        const nodeTag = transformConfig.nodeTag;\n        const node = this.parentNodes ? this.parentNodes[nodeTag] : null;\n        if (!(node instanceof RCTValueAnimatedNode)) {\n          continue;\n        }\n        value = node.value;\n      } else {\n        value = transformConfig.value;\n      }\n      transform.push({ [property]: value });\n    }\n\n    this.propsDictionary.animatedTransform = transform;\n  }\n}\n\nexport default RCTTransformAnimatedNode;\n"],"file":"RCTTransformAnimatedNode.js"}