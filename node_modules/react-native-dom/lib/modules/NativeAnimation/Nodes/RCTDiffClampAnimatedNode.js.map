{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTDiffClampAnimatedNode.js"],"names":["RCTDiffClampAnimatedNode","tag","config","inputNodeTag","input","min","max","parent","value","lastValue","inputNodeValue","diff","Math","parentNodes","inputNode","RCTValueAnimatedNode","console","error"],"mappings":"qsBAEA,4DAGA,qF,GAEMA,CAAAA,wB,wGAMJ,kCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,uEACvC,oHAAMD,GAAN,CAAWC,MAAX,GACA,MAAKC,YAAL,CAAoBD,MAAM,CAACE,KAA3B,CACA,MAAKC,GAAL,CAAWH,MAAM,CAACG,GAAlB,CACA,MAAKC,GAAL,CAAWJ,MAAM,CAACI,GAAlB,CAJuC,aAKxC,C,4GAEgBC,M,CAAyB,CACxC,sHAAuBA,MAAvB,EACA,KAAKC,KAAL,CAAa,KAAKC,SAAL,CAAiB,KAAKC,cAAnC,CACD,C,qDAEe,CACd,oHAEA,GAAMD,CAAAA,SAAS,CAAG,KAAKA,SAAL,CAAiB,KAAKA,SAAtB,CAAkC,CAApD,CACA,GAAMD,CAAAA,KAAK,CAAG,KAAKE,cAAnB,CAEA,GAAMC,CAAAA,IAAI,CAAGH,KAAK,CAAGC,SAArB,CACA,KAAKA,SAAL,CAAiBD,KAAjB,CACA,KAAKA,KAAL,CAAaI,IAAI,CAACP,GAAL,CAASO,IAAI,CAACN,GAAL,CAAS,KAAKE,KAAL,CAAaG,IAAtB,CAA4B,KAAKN,GAAjC,CAAT,CAAgD,KAAKC,GAArD,CAAb,CACD,C,0CAE4B,CAC3B,uBAAU,KAAKO,WAAf,kCACA,GAAMC,CAAAA,SAAS,CAAG,KAAKD,WAAL,CAAiB,KAAKV,YAAtB,CAAlB,CACA,GAAI,EAAEW,SAAS,WAAYC,+BAAvB,CAAJ,CAAkD,CAChDC,OAAO,CAACC,KAAR,CACE,6DADF,EAGA,MAAO,EAAP,CACD,CACD,MAAOH,CAAAA,SAAS,CAACN,KAAjB,CACD,C,sCAvCoCO,8B,eA0CxBf,wB","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport type RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\n\nclass RCTDiffClampAnimatedNode extends RCTValueAnimatedNode {\n  inputNodeTag: number;\n  min: number;\n  max: number;\n  lastValue: ?number;\n\n  constructor(tag: number, config: Object) {\n    super(tag, config);\n    this.inputNodeTag = config.input;\n    this.min = config.min;\n    this.max = config.max;\n  }\n\n  onAttachedToNode(parent: RCTAnimatedNode) {\n    super.onAttachedToNode(parent);\n    this.value = this.lastValue = this.inputNodeValue;\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const lastValue = this.lastValue ? this.lastValue : 0;\n    const value = this.inputNodeValue;\n\n    const diff = value - lastValue;\n    this.lastValue = value;\n    this.value = Math.min(Math.max(this.value + diff, this.min), this.max);\n  }\n\n  get inputNodeValue(): number {\n    invariant(this.parentNodes, `diffClamp node has no parents`);\n    const inputNode = this.parentNodes[this.inputNodeTag];\n    if (!(inputNode instanceof RCTValueAnimatedNode)) {\n      console.error(\n        \"Illegal node ID set as an input for Animated.DiffClamp node\"\n      );\n      return 0;\n    }\n    return inputNode.value;\n  }\n}\n\nexport default RCTDiffClampAnimatedNode;\n"],"file":"RCTDiffClampAnimatedNode.js"}