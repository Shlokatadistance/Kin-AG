{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTAnimationUtils.js"],"names":["EXTRAPOLATE_TYPE_IDENTITY","EXTRAPOLATE_TYPE_CLAMP","EXTRAPOLATE_TYPE_EXTEND","RCTFindIndexOfNearestValue","value","range","index","rangeCount","length","inputValue","RCTInterpolateValue","inputMin","inputMax","outputMin","outputMax","extrapolateLeft","extrapolateRight","Error","RCTInterpolateValueInRange","inputRange","outputRange","rangeIndex","output"],"mappings":"+QAEO,GAAMA,CAAAA,yBAAyB,CAAG,UAAlC,C,4DACA,GAAMC,CAAAA,sBAAsB,CAAG,OAA/B,C,sDACA,GAAMC,CAAAA,uBAAuB,CAAG,QAAhC,C,wDAEP,QAASC,CAAAA,0BAAT,CAAoCC,KAApC,CAAmDC,KAAnD,CAAoE,CAClE,GAAIC,CAAAA,KAAJ,CACA,GAAMC,CAAAA,UAAU,CAAGF,KAAK,CAACG,MAAzB,CACA,IAAKF,KAAK,CAAG,CAAb,CAAgBA,KAAK,CAAGC,UAAU,CAAG,CAArC,CAAwCD,KAAK,EAA7C,CAAiD,CAC/C,GAAMG,CAAAA,UAAU,CAAGJ,KAAK,CAACC,KAAD,CAAxB,CACA,GAAIG,UAAU,EAAIL,KAAlB,CAAyB,CACvB,MACD,CACF,CACD,MAAOE,CAAAA,KAAK,CAAG,CAAf,CACD,CAEM,QAASI,CAAAA,mBAAT,CACLN,KADK,CAELO,QAFK,CAGLC,QAHK,CAILC,SAJK,CAKLC,SALK,CAMLC,eANK,CAOLC,gBAPK,CAQL,CACA,GAAIZ,KAAK,CAAGO,QAAZ,CAAsB,CACpB,GAAII,eAAe,GAAK,UAAxB,CAAoC,CAClC,MAAOX,CAAAA,KAAP,CACD,CAFD,IAEO,IAAIW,eAAe,GAAK,OAAxB,CAAiC,CACtCX,KAAK,CAAGO,QAAR,CACD,CAFM,IAEA,IAAII,eAAe,GAAK,QAAxB,CAAkC,CAExC,CAFM,IAEA,CACL,KAAM,IAAIE,CAAAA,KAAJ,+BAC0BF,eAD1B,2BAAN,CAGD,CACF,CAED,GAAIX,KAAK,CAAGQ,QAAZ,CAAsB,CACpB,GAAII,gBAAgB,GAAK,UAAzB,CAAqC,CACnC,MAAOZ,CAAAA,KAAP,CACD,CAFD,IAEO,IAAIY,gBAAgB,GAAK,OAAzB,CAAkC,CACvCZ,KAAK,CAAGQ,QAAR,CACD,CAFM,IAEA,IAAII,gBAAgB,GAAK,QAAzB,CAAmC,CAEzC,CAFM,IAEA,CACL,KAAM,IAAIC,CAAAA,KAAJ,+BAC0BD,gBAD1B,4BAAN,CAGD,CACF,CAED,MACEH,CAAAA,SAAS,CACR,CAACT,KAAK,CAAGO,QAAT,GAAsBG,SAAS,CAAGD,SAAlC,CAAD,EAAkDD,QAAQ,CAAGD,QAA7D,CAFF,CAID,CAEM,QAASO,CAAAA,0BAAT,CACLd,KADK,CAELe,UAFK,CAGLC,WAHK,CAILL,eAJK,CAKLC,gBALK,CAML,CACA,GAAMK,CAAAA,UAAU,CAAGlB,0BAA0B,CAACC,KAAD,CAAQe,UAAR,CAA7C,CACA,GAAMR,CAAAA,QAAQ,CAAGQ,UAAU,CAACE,UAAD,CAA3B,CACA,GAAMT,CAAAA,QAAQ,CAAGO,UAAU,CAACE,UAAU,CAAG,CAAd,CAA3B,CACA,GAAMR,CAAAA,SAAS,CAAGO,WAAW,CAACC,UAAD,CAA7B,CACA,GAAMP,CAAAA,SAAS,CAAGM,WAAW,CAACC,UAAU,CAAG,CAAd,CAA7B,CAEA,GAAMC,CAAAA,MAAM,CAAGZ,mBAAmB,CAChCN,KADgC,CAEhCO,QAFgC,CAGhCC,QAHgC,CAIhCC,SAJgC,CAKhCC,SALgC,CAMhCC,eANgC,CAOhCC,gBAPgC,CAAlC,CAUA,MAAOM,CAAAA,MAAP,CACD","sourcesContent":["/** @flow */\n\nexport const EXTRAPOLATE_TYPE_IDENTITY = \"identity\";\nexport const EXTRAPOLATE_TYPE_CLAMP = \"clamp\";\nexport const EXTRAPOLATE_TYPE_EXTEND = \"extend\";\n\nfunction RCTFindIndexOfNearestValue(value: number, range: number[]) {\n  let index;\n  const rangeCount = range.length;\n  for (index = 1; index < rangeCount - 1; index++) {\n    const inputValue = range[index];\n    if (inputValue >= value) {\n      break;\n    }\n  }\n  return index - 1;\n}\n\nexport function RCTInterpolateValue(\n  value: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  extrapolateLeft: string,\n  extrapolateRight: string\n) {\n  if (value < inputMin) {\n    if (extrapolateLeft === \"identity\") {\n      return value;\n    } else if (extrapolateLeft === \"clamp\") {\n      value = inputMin;\n    } else if (extrapolateLeft === \"extend\") {\n      // noop\n    } else {\n      throw new Error(\n        `Invalid extrapolation type ${extrapolateLeft} for left extrapolation`\n      );\n    }\n  }\n\n  if (value > inputMax) {\n    if (extrapolateRight === \"identity\") {\n      return value;\n    } else if (extrapolateRight === \"clamp\") {\n      value = inputMax;\n    } else if (extrapolateRight === \"extend\") {\n      // noop\n    } else {\n      throw new Error(\n        `Invalid extrapolation type ${extrapolateRight} for right extrapolation`\n      );\n    }\n  }\n\n  return (\n    outputMin +\n    ((value - inputMin) * (outputMax - outputMin)) / (inputMax - inputMin)\n  );\n}\n\nexport function RCTInterpolateValueInRange(\n  value: number,\n  inputRange: number[],\n  outputRange: number[],\n  extrapolateLeft: string,\n  extrapolateRight: string\n) {\n  const rangeIndex = RCTFindIndexOfNearestValue(value, inputRange);\n  const inputMin = inputRange[rangeIndex];\n  const inputMax = inputRange[rangeIndex + 1];\n  const outputMin = outputRange[rangeIndex];\n  const outputMax = outputRange[rangeIndex + 1];\n\n  const output = RCTInterpolateValue(\n    value,\n    inputMin,\n    inputMax,\n    outputMin,\n    outputMax,\n    extrapolateLeft,\n    extrapolateRight\n  );\n\n  return output;\n}\n"],"file":"RCTAnimationUtils.js"}