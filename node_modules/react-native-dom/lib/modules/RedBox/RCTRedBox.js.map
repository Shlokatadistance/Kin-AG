{"version":3,"sources":["../../../ReactDom/modules/RedBox/RCTRedBox.js"],"names":["getFileName","path","split","pop","RCTRedBox","bridge","dismiss","domRoot","firstChild","removeChild","reload","window","location","copy","fullStackTrace","_lastErrorMessage","_lastStackTrace","frame","methodName","file","formatFrameSource","bundleURL","URL","bundleLocation","pathname","search","fetch","method","body","headers","openStackFrame","detail","JSON","stringify","document","createElement","setAttribute","parent","appendChild","fileName","name","lineInfo","lineNumber","column","message","stack","currentBox","redBox","RedBox","addEventListener","RCTModule","moduleName"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport RedBox from \"rndom-redbox\";\n\nimport RCTModule from \"RCTModule\";\nimport type RCTBridge from \"RCTBridge\";\nimport type { StackEntry } from \"RCTExceptionsManager\";\n\nfunction getFileName(path) {\n  return path\n    .split(\"\\\\\")\n    .pop()\n    .split(\"/\")\n    .pop();\n}\n\nclass RCTRedBox extends RCTModule {\n  static moduleName = \"RCTRedBox\";\n\n  domRoot: HTMLElement;\n  currentBox: ?RedBox;\n\n  _lastErrorMessage: ?string;\n  _lastStackTrace: ?(StackEntry[]);\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.domRoot = document.createElement(\"div\");\n    this.domRoot.setAttribute(\"id\", \"redbox\");\n\n    bridge.parent.appendChild(this.domRoot);\n  }\n\n  dismiss = () => {\n    while (this.domRoot.firstChild) {\n      this.domRoot.removeChild(this.domRoot.firstChild);\n    }\n  };\n\n  reload = () => {\n    window.location.reload(true);\n  };\n\n  formatFrameSource(frame: StackEntry) {\n    const fileName = (() => {\n      if (frame.file) {\n        const name = getFileName(frame.file);\n        if (name) return name;\n      }\n      return \"<unknown file>\";\n    })();\n\n    let lineInfo = `${fileName}:${frame.lineNumber}`;\n    if (frame.column !== 0) {\n      lineInfo += `:${frame.column}`;\n    }\n    return lineInfo;\n  }\n\n  copy = () => {\n    let fullStackTrace = \"\";\n\n    if (this._lastErrorMessage != null) {\n      fullStackTrace += this._lastErrorMessage;\n      fullStackTrace += \"\\n\\n\";\n    }\n\n    if (this._lastStackTrace) {\n      for (let frame of this._lastStackTrace) {\n        fullStackTrace += `${frame.methodName}\\n`;\n        if (frame.file) {\n          fullStackTrace += `    ${this.formatFrameSource(frame)}\\n`;\n        }\n      }\n    }\n\n    const bundleURL = new URL(this.bridge.bundleLocation);\n\n    bundleURL.pathname = \"/copy-to-clipboard\";\n    bundleURL.search = \"\";\n\n    fetch(bundleURL, {\n      method: \"POST\",\n      body: fullStackTrace,\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      }\n    });\n  };\n\n  openStackFrame = ({ detail: frame }: any) => {\n    const bundleURL = new URL(this.bridge.bundleLocation);\n\n    bundleURL.pathname = \"/open-stack-frame\";\n    bundleURL.search = \"\";\n\n    fetch(bundleURL, {\n      method: \"POST\",\n      body: JSON.stringify(frame),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  updateError(message: string, stack: StackEntry[]) {\n    const currentBox = this.currentBox;\n\n    if (currentBox) {\n      currentBox.message = message;\n      currentBox.stack = stack;\n    }\n\n    this._lastErrorMessage = message;\n    this._lastStackTrace = stack;\n  }\n\n  showErrorMessage(message: string, stack: StackEntry[]) {\n    const redBox: RedBox = new RedBox();\n    this.currentBox = redBox;\n\n    redBox.message = message;\n    redBox.stack = stack;\n\n    this._lastErrorMessage = message;\n    this._lastStackTrace = stack;\n\n    redBox.addEventListener(\"dismiss\", this.dismiss);\n    redBox.addEventListener(\"reload\", this.reload);\n    redBox.addEventListener(\"copy\", this.copy);\n    redBox.addEventListener(\"stackframe\", this.openStackFrame);\n\n    this.domRoot.appendChild(redBox);\n  }\n}\n\nexport default RCTRedBox;\n"],"file":"RCTRedBox.js"}