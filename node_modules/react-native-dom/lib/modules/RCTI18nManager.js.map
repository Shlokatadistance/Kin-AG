{"version":3,"sources":["../../ReactDom/modules/RCTI18nManager.js"],"names":["DIRECTION_CHANGE_EVENT","RCTI18nManager","bridge","initialize","preferredLanguage","navigator","languages","language","userLanguage","isRTL","rtlDetect","isRtlLang","doLeftAndRightSwapInRTL","allowRTL","forceRTL","emitChange","NotificationCenter","emitEvent","direction","value","resolvedIsRTL","RCTModule","moduleName"],"mappings":"4pBAEA,6DAGA,wFACA,yEAEO,GAAMA,CAAAA,sBAAsB,CAAG,uBAA/B,C,yDAGDC,CAAAA,c,wEAQJ,wBAAYC,MAAZ,CAA+B,6DAC7B,0GAAMA,MAAN,GACA,MAAKC,UAAL,GAF6B,aAG9B,C,uFAEY,CACX,GAAMC,CAAAA,iBAAiB,CAAGC,SAAS,CAACC,SAAV,CACtBD,SAAS,CAACC,SAAV,CAAoB,CAApB,CADsB,CAGtBD,SAAS,CAACE,QAAV,EAAsBF,SAAS,CAACG,YAHpC,CAKA,KAAKC,KAAL,CAAaC,mBAAUC,SAAV,CAAoBP,iBAApB,CAAb,CACA,KAAKQ,uBAAL,CAA+B,IAA/B,CACA,KAAKC,QAAL,CAAgB,IAAhB,CACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,UAAL,GACD,C,+CAoBY,CACXC,4BAAmBC,SAAnB,CAA6BjB,sBAA7B,CAAqD,CACnD,CACEkB,SAAS,CAAE,KAAKA,SADlB,CADmD,CAArD,EAKD,C,4CAESC,K,CAAgB,CACxB,KAAKN,QAAL,CAAgBM,KAAhB,CACA,KAAKJ,UAAL,GACD,C,4CAESI,K,CAAgB,CACxB,KAAKL,QAAL,CAAgBK,KAAhB,CACA,KAAKJ,UAAL,GACD,C,sEAEsBI,K,CAAgB,CACrC,KAAKP,uBAAL,CAA+BO,KAA/B,CACA,KAAKJ,UAAL,GACD,C,6DAEmB,CAClB,MAAO,CACLN,KAAK,CAAE,KAAKW,aADP,CAELR,uBAAuB,CAAE,KAAKA,uBAFzB,CAAP,CAID,C,qCA9Ce,CACd,MAAO,MAAKQ,aAAL,CAAqB,KAArB,CAA6B,KAApC,CACD,C,yCAEmB,CAClB,GAAIX,CAAAA,KAAK,CAAG,KAAKA,KAAjB,CAEA,GAAI,CAACA,KAAD,EAAU,KAAKK,QAAnB,CAA6B,CAC3BL,KAAK,CAAG,IAAR,CACD,CAED,GAAIA,KAAK,EAAI,CAAC,KAAKG,uBAAnB,CAA4C,CAC1CH,KAAK,CAAG,KAAR,CACD,CAED,MAAOA,CAAAA,KAAP,CACD,C,4BA1C0BY,mB,EAAvBpB,c,CACGqB,U,CAAa,gB,cA0EPrB,c","sourcesContent":["/** @flow */\n\nimport rtlDetect from \"rtl-detect\";\n\nimport type RCTBridge from \"RCTBridge\";\nimport NotificationCenter from \"NotificationCenter\";\nimport RCTModule from \"RCTModule\";\n\nexport const DIRECTION_CHANGE_EVENT = \"RCTDirectionDidChange\";\n\n// TODO: Persist changes in user preferences\nclass RCTI18nManager extends RCTModule {\n  static moduleName = \"RCTI18nManager\";\n\n  isRTL: boolean;\n  doLeftAndRightSwapInRTL: boolean;\n  allowRTL: boolean;\n  forceRTL: boolean;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.initialize();\n  }\n\n  initialize() {\n    const preferredLanguage = navigator.languages\n      ? navigator.languages[0]\n      : // $FlowFixMe: FlowLib\n        navigator.language || navigator.userLanguage;\n\n    this.isRTL = rtlDetect.isRtlLang(preferredLanguage);\n    this.doLeftAndRightSwapInRTL = true;\n    this.allowRTL = true;\n    this.forceRTL = false;\n    this.emitChange();\n  }\n\n  get direction() {\n    return this.resolvedIsRTL ? \"rtl\" : \"ltr\";\n  }\n\n  get resolvedIsRTL() {\n    let isRTL = this.isRTL;\n\n    if (!isRTL && this.forceRTL) {\n      isRTL = true;\n    }\n\n    if (isRTL && !this.doLeftAndRightSwapInRTL) {\n      isRTL = false;\n    }\n\n    return isRTL;\n  }\n\n  emitChange() {\n    NotificationCenter.emitEvent(DIRECTION_CHANGE_EVENT, [\n      {\n        direction: this.direction\n      }\n    ]);\n  }\n\n  $allowRTL(value: boolean) {\n    this.allowRTL = value;\n    this.emitChange();\n  }\n\n  $forceRTL(value: boolean) {\n    this.forceRTL = value;\n    this.emitChange();\n  }\n\n  $swapLeftAndRightInRTL(value: boolean) {\n    this.doLeftAndRightSwapInRTL = value;\n    this.emitChange();\n  }\n\n  constantsToExport() {\n    return {\n      isRTL: this.resolvedIsRTL,\n      doLeftAndRightSwapInRTL: this.doLeftAndRightSwapInRTL\n    };\n  }\n}\n\nexport default RCTI18nManager;\n"],"file":"RCTI18nManager.js"}