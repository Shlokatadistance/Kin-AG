{"version":3,"sources":["../../ReactDom/modules/RCTNativeViewHierarchyOptimizer.js"],"names":["ENABLED","RCTNativeViewHierarchyOptimizer","manager","tagsWithLayoutVisited","Set","node","initialProps","createView","reactTag","viewName","isLayoutOnly","isLayoutOnlyAndCollapsable","removeAllNativeChildren","props","updateView","needsToLeaveLayoutOnly","transitionLayoutOnlyViewToNativeView","nodeToManage","indicesToRemove","tagsToRemove","viewsToAdd","tagsToDelete","manageChildren","i","length","tagToRemove","shouldDelete","j","nodeToRemove","shadowViewRegistry","get","removeNodeFromParent","view","nodeToAdd","tag","addNodeToNode","index","childrenTags","setChildren","layout","previousLayout","updateLayout","applyLayoutBase","clear","indexInNativeChildren","parent","reactSuperview","getNativeOffsetForChild","child","reactSubviews","result","walkUpUntilNonLayoutOnly","addNonLayoutNode","addLayoutOnlyNode","nativeNodeToRemoveFrom","nativeParent","indexOf","removeNativeChild","nonLayoutOnlyNode","layoutOnlyNode","addGrandchildren","addNativeChildAt","currentIndex","grandchild","grandchildCountBefore","totalNativeChildren","grandchildCountAfter","has","add","x","left","y","top","prevLayout","applyLayoutRecursive","toUpdate","width","height","childTag","childLayout","childX","childY","childIndex","removeReactSubview","insertReactSubviewAtIndex","size","map","prop","LAYOUT_ONLY_PROPS","includes","value","opacity","overflow","collapsable","Object","keys","propName","isPropLayoutOnly"],"mappings":"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","sourcesContent":["// @flow\n\nimport invariant from \"invariant\";\n\nimport { LAYOUT_ONLY_PROPS } from \"RCTShadowView\";\nimport type RCTShadowView from \"RCTShadowView\";\nimport type UIManager from \"RCTUIManager\";\n\ntype NodeIndexPair = {\n  node: RCTShadowView,\n  index: number\n};\n\nconst ENABLED = true;\n\nclass RCTNativeViewHierarchyOptimizer {\n  manager: UIManager;\n  tagsWithLayoutVisited: Set<number>;\n\n  constructor(manager: UIManager) {\n    this.manager = manager;\n    this.tagsWithLayoutVisited = new Set();\n  }\n\n  get shadowViewRegistry() {\n    return this.manager.shadowViewRegistry;\n  }\n\n  handleCreateView(node: RCTShadowView, initialProps: ?Object) {\n    if (!ENABLED) {\n      this.manager.createView(node.reactTag, node.viewName, initialProps);\n      return;\n    }\n\n    const isLayoutOnly =\n      node.viewName === \"RCTView\" &&\n      this.isLayoutOnlyAndCollapsable(initialProps);\n\n    node.isLayoutOnly = isLayoutOnly;\n\n    if (!isLayoutOnly) {\n      this.manager.createView(node.reactTag, node.viewName, initialProps);\n    }\n  }\n\n  handleRemoveNode(node: RCTShadowView) {\n    node.removeAllNativeChildren();\n  }\n\n  handleUpdateView(node: RCTShadowView, viewName: string, props: Object) {\n    if (!ENABLED) {\n      this.manager.updateView(node.reactTag, viewName, props);\n      return;\n    }\n\n    const needsToLeaveLayoutOnly =\n      node.isLayoutOnly && !this.isLayoutOnlyAndCollapsable(props);\n\n    if (needsToLeaveLayoutOnly) {\n      this.transitionLayoutOnlyViewToNativeView(node, props);\n    } else if (!node.isLayoutOnly) {\n      this.manager.updateView(node.reactTag, viewName, props);\n    }\n  }\n\n  handleManageChildren(\n    nodeToManage: RCTShadowView,\n    indicesToRemove: number[],\n    tagsToRemove: number[],\n    viewsToAdd: { tag: number, index: number }[],\n    tagsToDelete: number[]\n  ) {\n    if (!ENABLED) {\n      this.manager.manageChildren(\n        nodeToManage.reactTag,\n        indicesToRemove,\n        viewsToAdd,\n        tagsToDelete\n      );\n      return;\n    }\n\n    for (let i = 0; i < tagsToRemove.length; i++) {\n      const tagToRemove = tagsToRemove[i];\n      let shouldDelete = false;\n      for (let j = 0; j < tagsToDelete.length; j++) {\n        if (tagsToDelete[j] === tagToRemove) {\n          shouldDelete = true;\n          break;\n        }\n      }\n      const nodeToRemove = this.shadowViewRegistry.get(tagToRemove);\n      invariant(\n        nodeToRemove,\n        `No such shadow view found with tag ${tagToRemove}`\n      );\n      this.removeNodeFromParent(nodeToRemove, shouldDelete);\n    }\n\n    for (let i = 0; i < viewsToAdd.length; i++) {\n      const view = viewsToAdd[i];\n      const nodeToAdd = this.shadowViewRegistry.get(view.tag);\n      invariant(nodeToAdd, `No such shadow view found with tag ${view.tag}`);\n      this.addNodeToNode(nodeToManage, nodeToAdd, view.index);\n    }\n  }\n\n  handleSetChildren(nodeToManage: RCTShadowView, childrenTags: number[]) {\n    if (!ENABLED) {\n      this.manager.setChildren(nodeToManage.reactTag, childrenTags);\n    }\n\n    for (let i = 0; i < childrenTags.length; i++) {\n      const nodeToAdd = this.shadowViewRegistry.get(childrenTags[i]);\n      invariant(nodeToAdd, `No such shadow view with tag ${childrenTags[i]}`);\n      this.addNodeToNode(nodeToManage, nodeToAdd, i);\n    }\n  }\n\n  handleUpdateLayout(node: RCTShadowView) {\n    if (!ENABLED) {\n      const layout = node.previousLayout;\n      if (layout) this.manager.updateLayout(node.reactTag, layout);\n      return;\n    }\n    this.applyLayoutBase(node);\n  }\n\n  onBatchComplete() {\n    this.tagsWithLayoutVisited.clear();\n  }\n\n  walkUpUntilNonLayoutOnly(\n    node: RCTShadowView,\n    indexInNativeChildren: number\n  ): ?NodeIndexPair {\n    while (node.isLayoutOnly) {\n      const parent = node.reactSuperview;\n      if (parent == null) {\n        return null;\n      }\n\n      indexInNativeChildren =\n        indexInNativeChildren + parent.getNativeOffsetForChild(node);\n      node = parent;\n    }\n\n    return { node, index: indexInNativeChildren };\n  }\n\n  addNodeToNode(parent: RCTShadowView, child: RCTShadowView, index: number) {\n    let indexInNativeChildren = parent.getNativeOffsetForChild(\n      parent.reactSubviews[index]\n    );\n\n    if (parent.isLayoutOnly) {\n      const result = this.walkUpUntilNonLayoutOnly(\n        parent,\n        indexInNativeChildren\n      );\n      if (result == null) {\n        return;\n      }\n      parent = result.node;\n      indexInNativeChildren = result.index;\n    }\n\n    if (!child.isLayoutOnly) {\n      this.addNonLayoutNode(parent, child, indexInNativeChildren);\n    } else {\n      this.addLayoutOnlyNode(parent, child, indexInNativeChildren);\n    }\n  }\n\n  removeNodeFromParent(nodeToRemove: RCTShadowView, shouldDelete: boolean) {\n    const nativeNodeToRemoveFrom = nodeToRemove.nativeParent;\n\n    if (nativeNodeToRemoveFrom != null) {\n      let index = nativeNodeToRemoveFrom.reactSubviews.indexOf(nodeToRemove);\n      nativeNodeToRemoveFrom.removeNativeChild(nodeToRemove);\n      this.manager.manageChildren(\n        nativeNodeToRemoveFrom.reactTag,\n        [index],\n        null,\n        shouldDelete ? [nodeToRemove.reactTag] : null\n      );\n    } else {\n      for (let i = nodeToRemove.reactSubviews.length - 1; i >= 0; i--) {\n        this.removeNodeFromParent(nodeToRemove.reactSubviews[i], shouldDelete);\n      }\n    }\n  }\n\n  addLayoutOnlyNode(\n    nonLayoutOnlyNode: RCTShadowView,\n    layoutOnlyNode: RCTShadowView,\n    index: number\n  ) {\n    this.addGrandchildren(nonLayoutOnlyNode, layoutOnlyNode, index);\n  }\n\n  addNonLayoutNode(parent: RCTShadowView, child: RCTShadowView, index: number) {\n    parent.addNativeChildAt(child, index);\n    this.manager.manageChildren(\n      parent.reactTag,\n      null,\n      [{ tag: child.reactTag, index }],\n      null\n    );\n  }\n\n  addGrandchildren(\n    nativeParent: RCTShadowView,\n    child: RCTShadowView,\n    index: number\n  ) {\n    invariant(\n      !nativeParent.isLayoutOnly,\n      \"Native parent cannot be a layoutOnly node\"\n    );\n\n    // `child` can't hold native children. Add all of `child`'s children to `parent`.\n    let currentIndex = index;\n    for (let i = 0; i < child.reactSubviews.length; i++) {\n      const grandchild = child.reactSubviews[i];\n      invariant(\n        grandchild.nativeParent == null,\n        \"Grandchild must not have native parent\"\n      );\n\n      if (grandchild.isLayoutOnly) {\n        // Adding this child could result in adding multiple native views\n        const grandchildCountBefore = nativeParent.totalNativeChildren;\n        this.addLayoutOnlyNode(nativeParent, grandchild, currentIndex);\n        const grandchildCountAfter = nativeParent.totalNativeChildren;\n        currentIndex += grandchildCountAfter - grandchildCountBefore;\n      } else {\n        this.addNonLayoutNode(nativeParent, grandchild, currentIndex);\n        currentIndex++;\n      }\n    }\n  }\n\n  applyLayoutBase(node: RCTShadowView) {\n    const tag = node.reactTag;\n    if (this.tagsWithLayoutVisited.has(tag)) {\n      return;\n    }\n    this.tagsWithLayoutVisited.add(tag);\n\n    if (node.previousLayout == null) {\n      return;\n    }\n\n    let x = node.previousLayout.left;\n    let y = node.previousLayout.top;\n\n    let parent = node.reactSuperview;\n\n    if (parent) {\n      while (parent != null && parent.isLayoutOnly) {\n        const prevLayout = parent.previousLayout;\n        invariant(prevLayout, \"node has no layout calculated\");\n        // TODO(7854667): handle and test proper clipping\n        x += prevLayout.left;\n        y += prevLayout.top;\n\n        parent = parent.reactSuperview;\n      }\n    }\n\n    this.applyLayoutRecursive(node, x, y);\n  }\n\n  applyLayoutRecursive(toUpdate: RCTShadowView, x: number, y: number) {\n    if (!toUpdate.isLayoutOnly && toUpdate.nativeParent != null) {\n      const tag = toUpdate.reactTag;\n      const layout = toUpdate.previousLayout;\n\n      invariant(layout, `Node ${tag} has no layout calculated`);\n      this.manager.updateLayout(tag, {\n        left: x,\n        top: y,\n        width: layout.width,\n        height: layout.height\n      });\n      return;\n    }\n\n    for (let i = 0; i < toUpdate.reactSubviews.length; i++) {\n      const child = toUpdate.reactSubviews[i];\n      const childTag = child.reactTag;\n      if (this.tagsWithLayoutVisited.has(childTag)) {\n        continue;\n      }\n      this.tagsWithLayoutVisited.add(childTag);\n\n      const childLayout = child.previousLayout;\n      invariant(childLayout, `Node ${childTag} has no layout calculated`);\n\n      const childX = childLayout.left + x;\n      const childY = childLayout.top + y;\n\n      this.applyLayoutRecursive(child, childX, childY);\n    }\n  }\n\n  transitionLayoutOnlyViewToNativeView(node: RCTShadowView, props: ?Object) {\n    const parent = node.reactSuperview;\n    if (parent == null) {\n      node.isLayoutOnly = false;\n      return;\n    }\n\n    // First, remove the node from its parent. This causes the parent to update its native children\n    // count. The removeNodeFromParent call will cause all the view's children to be detached from\n    // their native parent.\n    const childIndex = parent.reactSubviews.indexOf(node);\n    parent.removeReactSubview(node);\n    this.removeNodeFromParent(node, false);\n\n    node.isLayoutOnly = false;\n\n    // Create the view since it doesn't exist in the native hierarchy yet\n    this.manager.createView(node.reactTag, node.viewName, props);\n\n    // Add the node and all its children as if we are adding a new nodes\n    parent.insertReactSubviewAtIndex(node, childIndex);\n    this.addNodeToNode(parent, node, childIndex);\n    for (let i = 0; i < node.reactSubviews.length; i++) {\n      this.addNodeToNode(node, node.reactSubviews[i], i);\n    }\n\n    // Update layouts since the children of the node were offset by its x/y position previously.\n    // Bit of a hack: we need to update the layout of this node's children now that it's no longer\n    // layout-only, but we may still receive more layout updates at the end of this batch that we\n    // don't want to ignore.\n    invariant(\n      this.tagsWithLayoutVisited.size == 0,\n      \"Tried to calculate layout with nodes already visited\"\n    );\n    this.applyLayoutBase(node);\n    for (let i = 0; i < node.reactSubviews.length; i++) {\n      this.applyLayoutBase(node.reactSubviews[i]);\n    }\n    this.tagsWithLayoutVisited.clear();\n  }\n\n  isPropLayoutOnly(map: Object, prop: string) {\n    if (LAYOUT_ONLY_PROPS.includes(prop)) {\n      return true;\n    } else if (prop === \"pointerEvents\") {\n      const value = map[prop];\n      return value === \"auto\" || value === \"box-none\";\n    }\n\n    // TODO: Border Color/Width/Radius Checks\n    switch (prop) {\n      case \"opacity\":\n        return map.opacity == null || map[prop] === 1;\n      case \"onLayout\":\n        return true;\n      case \"overflow\":\n        return map.overflow !== \"hidden\";\n      default:\n        return false;\n    }\n  }\n\n  isLayoutOnlyAndCollapsable(props: ?Object) {\n    if (props == null) return true;\n\n    if (props.collapsable != null && !props.collapsable) return false;\n\n    for (let propName of Object.keys(props)) {\n      if (!this.isPropLayoutOnly(props, propName)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default RCTNativeViewHierarchyOptimizer;\n"],"file":"RCTNativeViewHierarchyOptimizer.js"}