{"version":3,"sources":["../../../ReactDom/views/Text/RCTTextInput.js"],"names":["RCTTextInput","bridge","nativeEventCount","isFocused","blurOnSubmit","handleFocus","eventDispatcher","sendTextEvent","RCTTextEventType","RCTTextEventTypeFocus","reactTag","inputElement","value","handleBlur","RCTTextEventTypeEnd","RCTTextEventTypeBlur","handleChange","onChange","text","target","eventCount","handleSubmit","event","preventDefault","keyCode","RCTTextEventTypeSubmit","blur","getModuleByName","document","createElement","type","addEventListener","style","fontFamily","defaultFontStack","fontSize","defaultFontSize","backgroundColor","border","shadowRoot","attachShadow","mode","appendChild","focus","removeEventListener","borderRadius","top","left","width","height","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","textAlign","fontWeight","RCTView","customElements","define"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { Frame } from \"InternalLib\";\nimport type RCTBridge from \"RCTBridge\";\nimport type RCTEventDispatcher from \"RCTEventDispatcher\";\nimport { RCTTextEventType } from \"RCTEventDispatcher\";\nimport RCTView from \"RCTView\";\nimport { defaultFontSize, defaultFontStack } from \"RCTSharedTextValues\";\n\nclass RCTTextInput extends RCTView {\n  inputElement: HTMLInputElement;\n  eventDispatcher: RCTEventDispatcher;\n\n  nativeEventCount: number = 0;\n\n  onChange: ?Function;\n  isFocused: boolean = false;\n  blurOnSubmit: boolean = true;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.eventDispatcher = bridge.getModuleByName(\"EventDispatcher\");\n\n    this.inputElement = document.createElement(\"input\");\n    this.inputElement.type = \"text\";\n\n    this.inputElement.addEventListener(\"focus\", this.handleFocus);\n    this.inputElement.addEventListener(\"blur\", this.handleBlur);\n    this.inputElement.addEventListener(\"input\", this.handleChange);\n\n    Object.assign(this.inputElement.style, {\n      fontFamily: defaultFontStack,\n      fontSize: `${defaultFontSize}px`,\n      backgroundColor: \"transparent\",\n      border: \"0px solid\"\n    });\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(this.inputElement);\n    shadowRoot.appendChild(document.createElement(\"slot\"));\n  }\n\n  handleFocus = () => {\n    this.eventDispatcher.sendTextEvent(\n      RCTTextEventType.RCTTextEventTypeFocus,\n      this.reactTag,\n      this.inputElement.value,\n      null,\n      this.nativeEventCount\n    );\n  };\n\n  handleBlur = () => {\n    this.eventDispatcher.sendTextEvent(\n      RCTTextEventType.RCTTextEventTypeEnd,\n      this.reactTag,\n      this.inputElement.value,\n      null,\n      this.nativeEventCount\n    );\n\n    this.eventDispatcher.sendTextEvent(\n      RCTTextEventType.RCTTextEventTypeBlur,\n      this.reactTag,\n      this.inputElement.value,\n      null,\n      this.nativeEventCount\n    );\n  };\n\n  handleChange = () => {\n    this.nativeEventCount++;\n\n    if (this.onChange) {\n      this.onChange({\n        text: this.inputElement.value,\n        target: this.reactTag,\n        eventCount: this.nativeEventCount\n      });\n    }\n  };\n\n  focus() {\n    this.inputElement.addEventListener(\"keyup\", this.handleSubmit);\n    this.inputElement.focus();\n  }\n\n  blur() {\n    this.inputElement.removeEventListener(\"keyup\", this.handleSubmit);\n    this.inputElement.blur();\n  }\n\n  handleSubmit = (event: KeyboardEvent) => {\n    event.preventDefault();\n    if (event.keyCode === 13) {\n      this.eventDispatcher.sendTextEvent(\n        RCTTextEventType.RCTTextEventTypeSubmit,\n        this.reactTag,\n        this.inputElement.value,\n        null,\n        this.nativeEventCount\n      );\n\n      if (this.blurOnSubmit) {\n        this.blur();\n      }\n    }\n  };\n\n  set borderRadius(value: number) {\n    // $FlowFixMe\n    super.borderRadius = value;\n    this.inputElement.style.borderRadius = `${value}px`;\n  }\n\n  get frame(): Frame {\n    return super.frame;\n  }\n\n  set padding(value: number) {\n    this.inputElement.style.padding = `${value}px`;\n  }\n\n  set paddingLeft(value: number) {\n    this.inputElement.style.paddingLeft = `${value}px`;\n  }\n\n  set paddingRight(value: number) {\n    this.inputElement.style.paddingRight = `${value}px`;\n  }\n\n  set paddingTop(value: number) {\n    this.inputElement.style.paddingTop = `${value}px`;\n  }\n\n  set paddingBottom(value: number) {\n    this.inputElement.style.paddingBottom = `${value}px`;\n  }\n\n  set paddingVertical(value: number) {\n    this.paddingTop = value;\n    this.paddingBottom = value;\n  }\n\n  set paddingHorizontal(value: number) {\n    this.paddingLeft = value;\n    this.paddingRight = value;\n  }\n\n  set frame(value: Frame) {\n    super.frame = value;\n    Object.assign(this.inputElement.style, {\n      top: `${value.top}px`,\n      left: `${value.left}px`,\n      width: `${value.width}px`,\n      height: `${value.height}px`\n    });\n  }\n\n  set fontFamily(value: string) {\n    this.style.fontFamily = value;\n  }\n\n  set fontSize(value: any) {\n    this.style.fontSize = value;\n  }\n\n  set textAlign(value: string) {\n    this.style.textAlign = value;\n  }\n\n  set fontWeight(value: string) {\n    this.style.fontWeight = value;\n  }\n}\n\ncustomElements.define(\"rct-text-input\", RCTTextInput);\n\nexport default RCTTextInput;\n"],"file":"RCTTextInput.js"}