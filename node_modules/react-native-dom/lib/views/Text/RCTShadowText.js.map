{"version":3,"sources":["../../../ReactDom/views/Text/RCTShadowText.js"],"names":["TextStyle","DefaultTextStyle","breakWords","fontFamily","TextDefaults","fontSize","defaultFontSize","fontStyle","fontVariant","fontWeight","lineHeight","letterSpacing","whiteSpace","wordWrap","wordWrapWidth","Infinity","TEXT_SHADOW_STYLE_PROPS","TEXT_PX_PROPS","textMeasurementContainer","document","createElement","id","style","visibility","pointerEvents","webkitTextSizeAdjust","body","appendChild","canvasMesurement","position","measureContext","getContext","TextMetrics","_canvas","_context","textPropsToTextStyle","props","Object","keys","reduce","acc","key","RCTShadowText","bridge","yogaNode","setMeasureFunc","width","widthMeasureMode","height","heightMeasureMode","measure","textChildren","textDirty","forEach","shadowPropName","defineProperty","configurable","get","set","value","indexOf","stack","split","join","markTextDirty","markDirty","reactSuperview","testDomElement","testDOMElement","firstChild","removeChild","text","maxWidth","textStyle","measurement","measureText","numberOfLines","clearTestDomElement","Constants","Yoga","canBeFast","length","RCTShadowRawText","measureMode","exactly","undefined","textChild","measureFast","maxHeight","getTestTree","getBoundingClientRect","measuredWidth","measuredHeight","remove","_testDOMElement","Math","ceil","_testTree","spanWrapper","resolvedProps","child","textLines","i","currentLine","insertAdjacentText","insertAdjacentElement","subview","index","splice","filter","s","parentNode","_numberOfLines","domElement","display","contain","RCTShadowView"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport guid from \"Guid\";\nimport {\n  defaults as TextDefaults,\n  defaultFontSize,\n  defaultFontStack\n} from \"RCTSharedTextValues\";\nimport RCTShadowView from \"RCTShadowView\";\nimport RCTShadowRawText from \"RCTShadowRawText\";\nimport type RCTBridge from \"RCTBridge\";\n\nimport { TextMetrics } from \"./Metrics/TextMetrics\";\nimport { TextStyle } from \"./Metrics/TextStyle\";\n\nTextStyle.DefaultTextStyle = {\n  breakWords: false,\n  fontFamily: TextDefaults.fontFamily,\n  fontSize: defaultFontSize,\n  fontStyle: \"normal\",\n  fontVariant: \"normal\",\n  fontWeight: \"normal\",\n  lineHeight: -1,\n  letterSpacing: 0,\n  whiteSpace: \"pre\",\n  wordWrap: false,\n  wordWrapWidth: Infinity\n};\n\nconst TEXT_SHADOW_STYLE_PROPS = [\n  \"fontFamily\",\n  \"fontSize\",\n  \"fontStyle\",\n  \"fontWeight\",\n  \"lineHeight\",\n  \"letterSpacing\"\n];\n\nconst TEXT_PX_PROPS = [];\n\nconst textMeasurementContainer = document.createElement(\"div\");\ntextMeasurementContainer.id = \"text-measurement\";\n// $FlowFixMe\nObject.assign(textMeasurementContainer.style, {\n  visibility: \"hidden\",\n  pointerEvents: \"none\",\n  webkitTextSizeAdjust: \"100%\"\n});\ndocument.body && document.body.appendChild(textMeasurementContainer);\n\nconst canvasMesurement = document.createElement(\"canvas\");\ncanvasMesurement.id = \"canvas-measurement\";\nObject.assign(canvasMesurement.style, {\n  position: \"absolute\",\n  visibility: \"hidden\",\n  pointerEvents: \"none\"\n});\ndocument.body && document.body.appendChild(canvasMesurement);\nconst measureContext = canvasMesurement.getContext(\"2d\");\nTextMetrics._canvas = canvasMesurement;\nTextMetrics._context = measureContext;\n\nconst textPropsToTextStyle = (props) => {\n  const style = Object.keys(props).reduce((acc, key) => {\n    if (props[key] && props[key] !== \"inherit\") {\n      return { ...acc, [key]: props[key] };\n    }\n    return acc;\n  }, {});\n\n  return new TextStyle(style);\n};\n\nclass RCTShadowText extends RCTShadowView {\n  previousWidth: number;\n  previousHeight: number;\n  textChildren: Array<RCTShadowText | RCTShadowRawText>;\n  textDirty: boolean;\n  props: { [string]: any };\n\n  fontFamily: ?string;\n  fontSize: ?string;\n  fontStyle: ?string;\n  fontWeight: ?string;\n  lineHeight: ?string;\n\n  _testTree: ?HTMLElement;\n  _testDOMElement: ?HTMLElement;\n  _numberOfLines: number;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    // custom measure function for the flexbox layout\n    this.yogaNode.setMeasureFunc(\n      (width, widthMeasureMode, height, heightMeasureMode) =>\n        this.measure(width, widthMeasureMode, height, heightMeasureMode)\n    );\n\n    this.props = {};\n    this.textChildren = [];\n    this.textDirty = true;\n\n    TEXT_SHADOW_STYLE_PROPS.forEach((shadowPropName: string) => {\n      Object.defineProperty(this, shadowPropName, {\n        configurable: true,\n        get: () => this.props[shadowPropName],\n        set: (value) => {\n          if (value != null) {\n            if (\n              shadowPropName === \"fontFamily\" &&\n              value.indexOf(\"System\") > -1\n            ) {\n              // Handle 'System' font\n              const stack = value.split(/\\s*,\\s*/);\n              stack[stack.indexOf(\"System\")] = TextDefaults.fontFamily;\n              value = stack.join(\", \");\n            }\n            this.props[shadowPropName] = value;\n          }\n          this.markTextDirty();\n        }\n      });\n      // $FlowFixMe\n      this[shadowPropName] = null;\n    });\n  }\n\n  isVirtual() {\n    return true;\n  }\n\n  get numberOfLines(): number {\n    return this._numberOfLines;\n  }\n\n  set numberOfLines(value: number) {\n    this._numberOfLines = value;\n    this.markTextDirty();\n  }\n\n  get testDOMElement(): HTMLElement {\n    if (this._testDOMElement == null) {\n      // create dom node for measuring text\n      const domElement = document.createElement(\"div\");\n      domElement.id = guid();\n      Object.assign(domElement.style, {\n        position: \"absolute\",\n        visibility: \"hidden\",\n        maxHeight: \"auto\",\n        maxWidth: \"auto\",\n        whiteSpace: \"nowrap\",\n        display: \"inline-block\",\n        contain: \"layout paint\"\n      });\n      textMeasurementContainer.appendChild(domElement);\n      this._testDOMElement = domElement;\n    }\n    return this._testDOMElement;\n  }\n\n  markTextDirty() {\n    this.yogaNode.markDirty();\n    this.textDirty = true;\n    if (this.reactSuperview instanceof RCTShadowText) {\n      this.reactSuperview.markTextDirty();\n    }\n  }\n\n  clearTestDomElement() {\n    const testDomElement = this.testDOMElement;\n    while (testDomElement.firstChild) {\n      testDomElement.removeChild(testDomElement.firstChild);\n    }\n  }\n\n  measureFast(text: string, style: Object, maxWidth?: number) {\n    const textStyle = textPropsToTextStyle(style);\n\n    if (maxWidth != null) {\n      textStyle.wordWrap = true;\n      textStyle.wordWrapWidth = maxWidth;\n    }\n\n    const measurement = TextMetrics.measureText(\n      text,\n      textStyle,\n      this.numberOfLines,\n      maxWidth != null\n    );\n\n    return measurement;\n  }\n\n  /**\n   * Measure the dimensions of the text associated\n   * callback for css-layout\n   * @param: width - input width extents\n   * @param: widthMeasureMode - mode to constrain width CSS_MEASURE_MODE_EXACTLY, CSS_MEASURE_MODE_UNDEFINED\n   * @param: height - input height extents\n   * @param: heightMeasureMode - mode to constrain height CSS_MEASURE_MODE_EXACTLY, CSS_MEASURE_MODE_UNDEFINED\n   * @return: object containing measured width and height\n   */\n  measure(\n    width: number,\n    widthMeasureMode: *,\n    height: number,\n    heightMeasureMode: *\n  ): { width: number, height: number } {\n    this.clearTestDomElement();\n\n    const { Constants } = this.bridge.Yoga;\n\n    const canBeFast =\n      this.textChildren.length === 1 &&\n      this.textChildren[0] instanceof RCTShadowRawText;\n\n    if (canBeFast) {\n      if (\n        widthMeasureMode !== Constants.measureMode.exactly ||\n        heightMeasureMode !== Constants.measureMode.exactly\n      ) {\n        let maxWidth;\n        if (widthMeasureMode !== Constants.measureMode.undefined) {\n          maxWidth = width;\n        }\n\n        const textChild = this.textChildren[0];\n        invariant(\n          textChild instanceof RCTShadowRawText,\n          `Simple text must have a raw text child`\n        );\n        const measurement = this.measureFast(\n          textChild.text,\n          this.props,\n          maxWidth\n        );\n\n        return {\n          width: measurement.width,\n          height: measurement.height\n        };\n      }\n      return {\n        width: width || 0,\n        height: height || 0\n      };\n    }\n\n    const whiteSpace = this.numberOfLines === 1 ? \"nowrap\" : \"pre-wrap\";\n\n    if (\n      widthMeasureMode !== Constants.measureMode.exactly ||\n      heightMeasureMode !== Constants.measureMode.exactly\n    ) {\n      if (widthMeasureMode !== Constants.measureMode.undefined) {\n        Object.assign(this.testDOMElement.style, {\n          maxWidth: `${width}px`,\n          maxHeight: \"auto\",\n          whiteSpace\n        });\n      } else {\n        Object.assign(this.testDOMElement.style, {\n          maxWidth: \"auto\",\n          maxHeight: `${height}px`,\n          whiteSpace\n        });\n      }\n    } else {\n      return {\n        width: width || 0,\n        height: height || 0\n      };\n    }\n\n    this.testDOMElement.appendChild(this.getTestTree());\n\n    const {\n      width: measuredWidth,\n      height: measuredHeight\n    } = this.testDOMElement.getBoundingClientRect();\n\n    this.testDOMElement.remove();\n    this._testDOMElement = null;\n\n    return {\n      width: Math.ceil(measuredWidth),\n      height: Math.ceil(measuredHeight)\n    };\n  }\n\n  getTestTree(): HTMLElement {\n    if (!this.textDirty) {\n      invariant(\n        this._testTree,\n        \"ShadowText is not marked as dirty but there is no cached testTree\"\n      );\n      return this._testTree;\n    }\n\n    const spanWrapper = document.createElement(\"span\");\n\n    // Line height is stored as a number (assumed px units)\n    // so we need to explicitly set it to its string equivalent value\n    const resolvedProps = {\n      ...this.props,\n      lineHeight: `${this.props.lineHeight}px`\n    };\n\n    Object.assign(spanWrapper.style, resolvedProps);\n\n    this.textChildren.forEach((child) => {\n      if (child instanceof RCTShadowRawText && child.text.length) {\n        // Split text by newline and insert breaks manually as insertAdjacentText does not respect newlines\n        const textLines = child.text.split(/\\r?\\n/);\n        for (let i = 0; i < textLines.length; i++) {\n          const currentLine = textLines[i];\n          spanWrapper.insertAdjacentText(\"beforeend\", currentLine);\n\n          if (i < textLines.length - 1) {\n            spanWrapper.insertAdjacentElement(\n              \"beforeend\",\n              document.createElement(\"br\")\n            );\n          }\n        }\n      } else if (child instanceof RCTShadowText) {\n        spanWrapper.insertAdjacentElement(\"beforeend\", child.getTestTree());\n      }\n    });\n\n    this._testTree = spanWrapper;\n    this.textDirty = false;\n\n    return this._testTree;\n  }\n\n  insertReactSubviewAtIndex(subview: RCTShadowView, index: number) {\n    invariant(\n      subview instanceof RCTShadowText || subview instanceof RCTShadowRawText,\n      \"Cannot insert subview to ShadowText that isn't of type RCTShadowText or RCTShadowRawText\"\n    );\n    subview.reactSuperview = this;\n    this.textChildren.splice(index, 0, subview);\n    this.markTextDirty();\n  }\n\n  removeReactSubview(subview: RCTShadowView) {\n    invariant(\n      subview instanceof RCTShadowText || subview instanceof RCTShadowRawText,\n      \"Cannot remove a subview that isn't of type RCTShadowText or RCTShadowRawText\"\n    );\n    subview.reactSuperview = undefined;\n    this.textChildren = this.textChildren.filter((s) => s !== subview);\n    this.markTextDirty();\n  }\n\n  purge() {\n    super.purge();\n    if (this._testDOMElement) {\n      this._testDOMElement.parentNode &&\n        this._testDOMElement.parentNode.removeChild(this._testDOMElement);\n    }\n  }\n}\n\nexport default RCTShadowText;\n"],"file":"RCTShadowText.js"}