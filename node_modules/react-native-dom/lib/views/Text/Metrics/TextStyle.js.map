{"version":3,"sources":["../../../../ReactDom/views/Text/Metrics/TextStyle.js"],"names":["TextStyle","style","styleID","reset","DefaultTextStyle","fontSizeString","fontSize","fontFamilies","fontFamily","split","i","length","trim","test","fontStyle","fontVariant","fontWeight","join","_breakWords","breakWords","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","letterSpacing","_lineHeight","Math","ceil","lineHeight","_whiteSpace","whiteSpace","_wordWrap","wordWrap","_wordWrapWidth","wordWrapWidth"],"mappings":"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","sourcesContent":["// @flow\n\n/*\nThe MIT License\n\nCopyright (c) 2013-2017 Mathew Groves, Chad Engler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nimport { deepCopyProperties } from \"./deepCopyProperties\";\n\ntype TextStyleObj = {\n  breakWords: boolean,\n  fontFamily: string,\n  fontSize: number,\n  fontStyle: string,\n  fontVariant: string,\n  fontWeight: string,\n  lineHeight: number,\n  letterSpacing: number,\n  whiteSpace: string,\n  wordWrap: boolean,\n  wordWrapWidth: number\n};\n\nexport class TextStyle {\n  static DefaultTextStyle: TextStyleObj;\n\n  styleID: number;\n\n  constructor(style: Object) {\n    this.styleID = 0;\n\n    this.reset();\n\n    deepCopyProperties(this, style, style);\n  }\n\n  reset() {\n    deepCopyProperties(\n      this,\n      TextStyle.DefaultTextStyle,\n      TextStyle.DefaultTextStyle\n    );\n  }\n\n  _breakWords: boolean;\n\n  get breakWords() {\n    return this._breakWords || TextStyle.DefaultTextStyle.breakWords;\n  }\n\n  set breakWords(breakWords: boolean) {\n    if (this._breakWords !== breakWords) {\n      this._breakWords = breakWords;\n      this.styleID++;\n    }\n  }\n\n  _fontFamily: string;\n\n  get fontFamily() {\n    return this._fontFamily || TextStyle.DefaultTextStyle.fontFamily;\n  }\n\n  set fontFamily(fontFamily: string) {\n    if (this._fontFamily !== fontFamily) {\n      this._fontFamily = fontFamily;\n      this.styleID++;\n    }\n  }\n\n  _fontSize: number;\n\n  get fontSize() {\n    return this._fontSize || TextStyle.DefaultTextStyle.fontSize;\n  }\n\n  set fontSize(fontSize: number) {\n    if (this._fontSize !== fontSize) {\n      this._fontSize = fontSize;\n      this.styleID++;\n    }\n  }\n\n  _fontStyle: string;\n\n  get fontStyle() {\n    return this._fontStyle || TextStyle.DefaultTextStyle.fontStyle;\n  }\n\n  set fontStyle(fontStyle: string) {\n    if (this._fontStyle !== fontStyle) {\n      this._fontStyle = fontStyle;\n      this.styleID++;\n    }\n  }\n\n  _fontVariant: string;\n\n  get fontVariant() {\n    return this._fontVariant || TextStyle.DefaultTextStyle.fontVariant;\n  }\n\n  set fontVariant(fontVariant: string) {\n    if (this._fontVariant !== fontVariant) {\n      this._fontVariant = fontVariant;\n      this.styleID++;\n    }\n  }\n\n  _fontWeight: string;\n\n  get fontWeight() {\n    return this._fontWeight || TextStyle.DefaultTextStyle.fontWeight;\n  }\n\n  set fontWeight(fontWeight: string) {\n    if (this._fontWeight !== fontWeight) {\n      this._fontWeight = fontWeight;\n      this.styleID++;\n    }\n  }\n\n  _letterSpacing: number;\n\n  get letterSpacing() {\n    return this._letterSpacing || TextStyle.DefaultTextStyle.letterSpacing;\n  }\n\n  set letterSpacing(letterSpacing: number) {\n    if (this._letterSpacing !== letterSpacing) {\n      this._letterSpacing = letterSpacing;\n      this.styleID++;\n    }\n  }\n\n  _lineHeight: number;\n\n  get lineHeight() {\n    return this._lineHeight === -1\n      ? Math.ceil(this.fontSize * 1.2)\n      : this._lineHeight;\n  }\n\n  set lineHeight(lineHeight: number) {\n    if (this._lineHeight !== lineHeight) {\n      this._lineHeight = lineHeight;\n    }\n  }\n\n  _whiteSpace: string;\n\n  get whiteSpace() {\n    return this._whiteSpace || TextStyle.DefaultTextStyle.whiteSpace;\n  }\n\n  set whiteSpace(whiteSpace: string) {\n    if (this._whiteSpace !== whiteSpace) {\n      this._whiteSpace = whiteSpace;\n      this.styleID++;\n    }\n  }\n\n  _wordWrap: boolean;\n\n  get wordWrap() {\n    return this._wordWrap || TextStyle.DefaultTextStyle.wordWrap;\n  }\n\n  set wordWrap(wordWrap: boolean) {\n    if (this._wordWrap !== wordWrap) {\n      this._wordWrap = wordWrap;\n      this.styleID++;\n    }\n  }\n\n  _wordWrapWidth: number;\n\n  get wordWrapWidth() {\n    return this._wordWrapWidth || TextStyle.DefaultTextStyle.wordWrapWidth;\n  }\n\n  set wordWrapWidth(wordWrapWidth: number) {\n    if (this._wordWrapWidth !== wordWrapWidth) {\n      this._wordWrapWidth = wordWrapWidth;\n      this.styleID++;\n    }\n  }\n\n  toFontString() {\n    const fontSizeString = `${this.fontSize}px`;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies = this.fontFamily.split(\",\");\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--) {\n      // Trim any extra whitespace\n      let fontFamily = fontFamilies[i].trim();\n\n      // Check if font already contains strings\n      if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily)) {\n        fontFamily = `\"${fontFamily}\"`;\n      }\n      fontFamilies[i] = fontFamily;\n    }\n\n    return `${this.fontStyle} ${this.fontVariant} ${\n      this.fontWeight\n    } ${fontSizeString} ${fontFamilies.join(\",\")}`;\n  }\n}\n"],"file":"TextStyle.js"}