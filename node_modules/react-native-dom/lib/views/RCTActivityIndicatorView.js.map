{"version":3,"sources":["../../ReactDom/views/RCTActivityIndicatorView.js"],"names":["INDICATOR_SVG","RCTActivityIndicatorView","bridge","animationContainer","constructAnimationContainer","childContainer","appendChild","animation","constructAnimation","color","animating","hidesWhenStopped","container","document","createElement","style","position","top","left","right","bottom","willChange","animate","transform","duration","iterations","Infinity","easing","_hidesWhenStopped","_animating","innerHTML","play","pause","value","updateView","RCTView","customElements","define"],"mappings":"6sBACA,2DAEA,+FAGA,GAAMA,CAAAA,aAAa,8WAAnB,C,GAOMC,CAAAA,wB,8EAOJ,kCAAYC,MAAZ,CAA+B,uEAC7B,oHAAMA,MAAN,GAEA,MAAKC,kBAAL,CAA0B,MAAKC,2BAAL,EAA1B,CACA,MAAKC,cAAL,CAAoBC,WAApB,CAAgC,MAAKH,kBAArC,EAEA,MAAKI,SAAL,CAAiB,MAAKC,kBAAL,EAAjB,CACA,MAAKC,KAAL,CAAa,mBAAb,CACA,MAAKC,SAAL,CAAiB,IAAjB,CACA,MAAKC,gBAAL,CAAwB,IAAxB,CAT6B,aAU9B,C,mIAE6B,CAC5B,GAAMC,CAAAA,SAAS,CAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB,CACA,sBAAcF,SAAS,CAACG,KAAxB,CAA+B,CAC7BC,QAAQ,CAAE,UADmB,CAE7BC,GAAG,CAAE,GAFwB,CAG7BC,IAAI,CAAE,GAHuB,CAI7BC,KAAK,CAAE,GAJsB,CAK7BC,MAAM,CAAE,GALqB,CAM7BC,UAAU,CAAE,WANiB,CAA/B,EAQA,MAAOT,CAAAA,SAAP,CACD,C,+DAEoB,CAEnB,MAAO,MAAKT,kBAAL,CAAwBmB,OAAxB,CACL,CAAC,CAAEC,SAAS,CAAE,cAAb,CAAD,CAAgC,CAAEA,SAAS,CAAE,gBAAb,CAAhC,CADK,CAEL,CACEC,QAAQ,CAAE,GADZ,CAEEC,UAAU,CAAEC,QAFd,CAGEC,MAAM,CAAE,QAHV,CAFK,CAAP,CAQD,C,+CAEY,CACX,GAAK,CAAC,KAAKC,iBAAN,EAA2B,CAAC,KAAKC,UAAlC,EAAiD,KAAKA,UAA1D,CAAsE,CACpE,KAAK1B,kBAAL,CAAwB2B,SAAxB,CAAoC9B,aAApC,CACD,CAFD,IAEO,CACL,KAAKG,kBAAL,CAAwB2B,SAAxB,CAAoC,EAApC,CACD,CAED,GAAI,KAAKD,UAAT,CAAqB,CACnB,KAAKtB,SAAL,CAAewB,IAAf,GACD,CAFD,IAEO,CACL,KAAKxB,SAAL,CAAeyB,KAAf,GACD,CACF,C,gCAESC,K,CAAe,CACvB,KAAKlB,KAAL,CAAWN,KAAX,CAAmBwB,KAAnB,CACD,C,oCAEaA,K,CAAgB,CAC5B,KAAKJ,UAAL,CAAkBI,KAAlB,CACA,KAAKC,UAAL,GACD,C,2CAEoBD,K,CAAgB,CACnC,KAAKL,iBAAL,CAAyBK,KAAzB,CACA,KAAKC,UAAL,GACD,C,sCAtEoCC,iB,EAyEvCC,cAAc,CAACC,MAAf,CAAsB,6BAAtB,CAAqDpC,wBAArD,E,aAEeA,wB","sourcesContent":["/** @flow */\nimport RCTView from \"RCTView\";\nimport type RCTBridge from \"RCTBridge\";\nimport ColorArrayFromHexARGB from \"ColorArrayFromHexARGB\";\n\n// adapted from https://github.com/necolas/react-native-web/blob/master/src/components/ActivityIndicator/index.js\nconst INDICATOR_SVG = `\n<svg height=\"100%\" viewBox=\"0 0 32 32\" width=\"100%\">\n  <circle cx=\"16\" cy=\"16\" fill=\"none\" r=\"14\" stroke-width=\"4\" style=\"stroke: currentColor; opacity: 0.2;\"></circle>\n  <circle cx=\"16\" cy=\"16\" fill=\"none\" r=\"14\" stroke-width=\"4\" style=\"stroke: currentColor; stroke-dasharray: 80px; stroke-dashoffset: 60px;\"></circle>\n</svg>\n`;\n\nclass RCTActivityIndicatorView extends RCTView {\n  // $FlowFixMe - WAAPI not included in FlowType Defs\n  animation: Animation;\n  animationContainer: HTMLElement;\n  _animating: boolean;\n  _hidesWhenStopped: boolean;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.animationContainer = this.constructAnimationContainer();\n    this.childContainer.appendChild(this.animationContainer);\n\n    this.animation = this.constructAnimation();\n    this.color = \"rgb(25, 118, 210)\";\n    this.animating = true;\n    this.hidesWhenStopped = true;\n  }\n\n  constructAnimationContainer() {\n    const container = document.createElement(\"div\");\n    Object.assign(container.style, {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      right: \"0\",\n      bottom: \"0\",\n      willChange: \"transform\"\n    });\n    return container;\n  }\n\n  constructAnimation() {\n    // $FlowFixMe - WAAPI\n    return this.animationContainer.animate(\n      [{ transform: \"rotate(0deg)\" }, { transform: \"rotate(360deg)\" }],\n      {\n        duration: 750,\n        iterations: Infinity,\n        easing: \"linear\"\n      }\n    );\n  }\n\n  updateView() {\n    if ((!this._hidesWhenStopped && !this._animating) || this._animating) {\n      this.animationContainer.innerHTML = INDICATOR_SVG;\n    } else {\n      this.animationContainer.innerHTML = \"\";\n    }\n\n    if (this._animating) {\n      this.animation.play();\n    } else {\n      this.animation.pause();\n    }\n  }\n\n  set color(value: string) {\n    this.style.color = value;\n  }\n\n  set animating(value: boolean) {\n    this._animating = value;\n    this.updateView();\n  }\n\n  set hidesWhenStopped(value: boolean) {\n    this._hidesWhenStopped = value;\n    this.updateView();\n  }\n}\n\ncustomElements.define(\"rct-activity-indicator-view\", RCTActivityIndicatorView);\n\nexport default RCTActivityIndicatorView;\n"],"file":"RCTActivityIndicatorView.js"}