{"version":3,"sources":["../../ReactDom/views/RCTScrollViewManager.js"],"names":["RCTScrollViewManager","RCTScrollView","bridge","addNumberProp","setScrollEventThrottle","addBooleanProp","setHorizontal","setScrollEnabled","addDirectEvent","view","value","scrollEventThrottle","reactTag","callbackId","uiManager","addUIBlock","_","viewRegistry","get","contentView","reactSubviews","RCTScrollContentView","callbackFromId","width","height","offsetX","offsetY","animated","scrollBehavior","scrollLeft","scrollTop","scrollWidth","scrollHeight","horizontal","scrollEnabled","RCTViewManager","moduleName"],"mappings":"0xBAEA,4DAGA,uEAEA,yE,GAEMA,CAAAA,oB,+XAGW,CACb,MAAO,IAAIC,uBAAJ,CAAkB,KAAKC,MAAvB,CAAP,CACD,C,qDAEe,CACd,MAAO,gHAEJC,aAFI,CAEU,qBAFV,CAEiC,KAAKC,sBAFtC,EAGJC,cAHI,CAGW,YAHX,CAGyB,KAAKC,aAH9B,EAIJD,cAJI,CAIW,eAJX,CAI4B,KAAKE,gBAJjC,EAKJC,cALI,CAKW,UALX,EAMJA,cANI,CAMW,mBANX,EAOJA,cAPI,CAOW,iBAPX,EAQJA,cARI,CAQW,uBARX,EASJA,cATI,CASW,qBATX,CAAP,CAUD,C,sEAEsBC,I,CAAqBC,K,CAAgB,CAC1DD,IAAI,CAACE,mBAAL,CAA2BD,KAAK,EAAI,IAAT,CAAgBA,KAAhB,CAAwB,CAAnD,CACD,C,wDAEeE,Q,CAAkBC,U,CAAoB,gBACpD,KAAKX,MAAL,CAAYY,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAA0C,CACzE,GAAMR,CAAAA,IAAI,CAAGQ,YAAY,CAACC,GAAb,CAAiBN,QAAjB,CAAb,CACA,uBACEH,IAAI,EAAIA,IAAI,WAAYR,uBAD1B,uCAEwCW,QAFxC,EAKA,GAAMO,CAAAA,WAAW,CAAGV,IAAI,CAACW,aAAL,CAAmB,CAAnB,CAApB,CACA,uBACED,WAAW,EAAIA,WAAW,WAAYE,oCADxC,6EAE8ET,QAF9E,EAKA,KAAI,CAACV,MAAL,CAAYoB,cAAZ,CAA2BT,UAA3B,EAAuC,CACrCU,KAAK,CAAEJ,WAAW,CAACI,KADkB,CAErCC,MAAM,CAAEL,WAAW,CAACK,MAFiB,CAAvC,EAID,CAjBD,EAkBD,C,4CAGCZ,Q,CACAa,O,CACAC,O,CACAC,Q,CACA,CACA,KAAKzB,MAAL,CAAYY,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAA0C,CACzE,GAAMR,CAAAA,IAAI,CAAGQ,YAAY,CAACC,GAAb,CAAiBN,QAAjB,CAAb,CACA,uBACEH,IAAI,EAAIA,IAAI,WAAYR,uBAD1B,uCAEwCW,QAFxC,EAKAH,IAAI,CAACmB,cAAL,CAAsBD,QAAQ,CAAG,QAAH,CAAc,MAA5C,CACAlB,IAAI,CAACoB,UAAL,CAAkBJ,OAAlB,CACAhB,IAAI,CAACqB,SAAL,CAAiBJ,OAAjB,CACD,CAVD,EAWD,C,kDAEYd,Q,CAAkBe,Q,CAAmB,CAChD,KAAKzB,MAAL,CAAYY,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAA0C,CACzE,GAAMR,CAAAA,IAAI,CAAGQ,YAAY,CAACC,GAAb,CAAiBN,QAAjB,CAAb,CACA,uBACEH,IAAI,EAAIA,IAAI,WAAYR,uBAD1B,uCAEwCW,QAFxC,EAKAH,IAAI,CAACmB,cAAL,CAAsBD,QAAQ,CAAG,QAAH,CAAc,MAA5C,CACAlB,IAAI,CAACoB,UAAL,CAAkBpB,IAAI,CAACsB,WAAvB,CACAtB,IAAI,CAACqB,SAAL,CAAiBrB,IAAI,CAACuB,YAAtB,CACD,CAVD,EAWD,C,sEAEsBpB,Q,CAAkB,CAExC,C,oDAEaH,I,CAAqBC,K,CAAiB,CAClDD,IAAI,CAACwB,UAAL,CAAkBvB,KAAlB,CACD,C,0DAEgBD,I,CAAqBC,K,CAAiB,CACrDD,IAAI,CAACyB,aAAL,CAAqBxB,KAArB,CACD,C,kCAxFgCyB,wB,EAA7BnC,oB,CACGoC,U,CAAa,sB,cA0FPpC,oB","sourcesContent":["/** @flow */\n\nimport invariant from \"invariant\";\n\nimport type RCTBridge from \"RCTBridge\";\nimport RCTScrollView, { RCTScrollContentView } from \"RCTScrollView\";\nimport type UIView from \"UIView\";\nimport RCTViewManager from \"RCTViewManager\";\n\nclass RCTScrollViewManager extends RCTViewManager {\n  static moduleName = \"RCTScrollViewManager\";\n\n  view(): UIView {\n    return new RCTScrollView(this.bridge);\n  }\n\n  describeProps() {\n    return super\n      .describeProps()\n      .addNumberProp(\"scrollEventThrottle\", this.setScrollEventThrottle)\n      .addBooleanProp(\"horizontal\", this.setHorizontal)\n      .addBooleanProp(\"scrollEnabled\", this.setScrollEnabled)\n      .addDirectEvent(\"onScroll\")\n      .addDirectEvent(\"onScrollBeginDrag\")\n      .addDirectEvent(\"onScrollEndDrag\")\n      .addDirectEvent(\"onMomentumScrollBegin\")\n      .addDirectEvent(\"onMomentumScrollEnd\");\n  }\n\n  setScrollEventThrottle(view: RCTScrollView, value: ?number) {\n    view.scrollEventThrottle = value != null ? value : 0;\n  }\n\n  $getContentSize(reactTag: number, callbackId: number) {\n    this.bridge.uiManager.addUIBlock((_, viewRegistry: Map<number, UIView>) => {\n      const view = viewRegistry.get(reactTag);\n      invariant(\n        view && view instanceof RCTScrollView,\n        `Cannot find RCTScrollView with tag ${reactTag}`\n      );\n\n      const contentView = view.reactSubviews[0];\n      invariant(\n        contentView && contentView instanceof RCTScrollContentView,\n        `Cannot find coresponding RCTScrollContentView for RCTScrollView with tag ${reactTag}`\n      );\n\n      this.bridge.callbackFromId(callbackId)({\n        width: contentView.width,\n        height: contentView.height\n      });\n    });\n  }\n\n  $scrollTo(\n    reactTag: number,\n    offsetX: number,\n    offsetY: number,\n    animated: boolean\n  ) {\n    this.bridge.uiManager.addUIBlock((_, viewRegistry: Map<number, UIView>) => {\n      const view = viewRegistry.get(reactTag);\n      invariant(\n        view && view instanceof RCTScrollView,\n        `Cannot find RCTScrollView with tag ${reactTag}`\n      );\n\n      view.scrollBehavior = animated ? \"smooth\" : \"auto\";\n      view.scrollLeft = offsetX;\n      view.scrollTop = offsetY;\n    });\n  }\n\n  $scrollToEnd(reactTag: number, animated: boolean) {\n    this.bridge.uiManager.addUIBlock((_, viewRegistry: Map<number, UIView>) => {\n      const view = viewRegistry.get(reactTag);\n      invariant(\n        view && view instanceof RCTScrollView,\n        `Cannot find RCTScrollView with tag ${reactTag}`\n      );\n\n      view.scrollBehavior = animated ? \"smooth\" : \"auto\";\n      view.scrollLeft = view.scrollWidth;\n      view.scrollTop = view.scrollHeight;\n    });\n  }\n\n  $flashScrollIndicators(reactTag: number) {\n    // no-op\n  }\n\n  setHorizontal(view: RCTScrollView, value: ?boolean) {\n    view.horizontal = value;\n  }\n\n  setScrollEnabled(view: RCTScrollView, value: ?boolean) {\n    view.scrollEnabled = value;\n  }\n}\n\nexport default RCTScrollViewManager;\n"],"file":"RCTScrollViewManager.js"}