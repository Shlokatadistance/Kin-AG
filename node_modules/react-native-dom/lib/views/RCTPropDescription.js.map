{"version":3,"sources":["../../ReactDom/views/RCTPropDescription.js"],"names":["eventSetter","propName","view","bound","json","mutableEvent","target","reactTag","bridge","eventDispatcher","sendInputEvent","undefined","RCTPropDescription","viewProps","shadowProps","name","push","type","RCTPropTypes","string","setter","value","nativeOnly","addProp","addShadowProp","number","bool","array","betterSetter","a","r","g","b","stringValue","object","directEvent","bubblingEvent"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type RCTView from \"RCTView\";\nimport RCTPropTypes from \"RCTPropTypes\";\nimport ColorArrayFromHexARGB from \"ColorArrayFromHexARGB\";\n\ntype PropDef<T> = {\n  name: string,\n  type: string,\n  setter: (view: $Subtype<RCTView>, value: ?T) => void,\n  nativeOnly: boolean\n};\n\ntype NumberPropDef = PropDef<number>;\ntype StringPropDef = PropDef<string>;\ntype BoolPropDef = PropDef<boolean>;\ntype ArrayPropDef = PropDef<Array<any>>;\ntype ColorPropDef = PropDef<string>;\ntype ObjectPropDef = PropDef<Object>;\ntype EventPropDef = PropDef<Function>;\n\nexport type PropDefType = PropDef<any>;\n\ntype Setter = $PropertyType<PropDefType, \"setter\">;\n\nfunction eventSetter(propName: string) {\n  return (view: RCTView, bound: ?boolean) => {\n    if (bound) {\n      (view: any)[propName] = (json: Object) => {\n        const mutableEvent = { ...json };\n        mutableEvent.target = view.reactTag;\n        view.bridge.eventDispatcher.sendInputEvent(propName, mutableEvent);\n      };\n    } else {\n      (view: any)[propName] = undefined;\n    }\n  };\n}\n\nclass RCTPropDescription {\n  viewProps: PropDefType[] = [];\n  shadowProps: PropDefType[] = [];\n\n  addShadowProp(name: string): RCTPropDescription {\n    this.shadowProps.push({\n      name,\n      type: RCTPropTypes.string,\n      setter: (view, value) => {\n        view[name] = value;\n      },\n      nativeOnly: false\n    });\n    return this;\n  }\n\n  addProp(\n    name: string,\n    type: string,\n    setter: Setter,\n    nativeOnly: boolean\n  ): RCTPropDescription {\n    this.viewProps.push({ name, type, setter, nativeOnly });\n    return this;\n  }\n\n  addMirroredProp(\n    name: string,\n    type: string,\n    setter: Setter,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, type, setter, nativeOnly).addShadowProp(name);\n  }\n\n  addNumberProp(\n    name: string,\n    setter: $PropertyType<NumberPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, RCTPropTypes.number, setter, nativeOnly);\n  }\n\n  addStringProp(\n    name: string,\n    setter: $PropertyType<StringPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, RCTPropTypes.string, setter, nativeOnly);\n  }\n\n  addBooleanProp(\n    name: string,\n    setter: $PropertyType<BoolPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, RCTPropTypes.bool, setter, nativeOnly);\n  }\n\n  addArrayProp(\n    name: string,\n    setter: $PropertyType<ArrayPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, RCTPropTypes.array, setter, nativeOnly);\n  }\n\n  addColorProp(\n    name: string,\n    setter: $PropertyType<ColorPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    const betterSetter = (view: RCTView, value: ?(number | string)) => {\n      if (typeof value === \"number\") {\n        const [a, r, g, b] = ColorArrayFromHexARGB(value);\n        const stringValue = `rgba(${r},${g},${b},${a})`;\n        setter(view, stringValue);\n      } else {\n        setter(view, value);\n      }\n    };\n\n    return this.addProp(name, RCTPropTypes.array, betterSetter, nativeOnly);\n  }\n\n  addObjectProp(\n    name: string,\n    setter: $PropertyType<ObjectPropDef, \"setter\">,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    return this.addProp(name, RCTPropTypes.object, setter, nativeOnly);\n  }\n\n  addDirectShadowEvent(name: string): RCTPropDescription {\n    const setter = eventSetter(name);\n    this.shadowProps.push({\n      name,\n      type: RCTPropTypes.directEvent,\n      setter,\n      nativeOnly: false\n    });\n    return this;\n  }\n\n  addDirectEvent(\n    name: string,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    const setter = eventSetter(name);\n    return this.addProp(name, RCTPropTypes.directEvent, setter, nativeOnly);\n  }\n\n  addBubblingEvent(\n    name: string,\n    nativeOnly: boolean = false\n  ): RCTPropDescription {\n    const setter = eventSetter(name);\n    return this.addProp(name, RCTPropTypes.bubblingEvent, setter, nativeOnly);\n  }\n}\n\nexport default RCTPropDescription;\n"],"file":"RCTPropDescription.js"}