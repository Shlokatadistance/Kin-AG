{"version":3,"sources":["../../../ReactDom/views/Image/RCTImageViewManager.js"],"names":["RCTImageViewManager","RCTImageView","bridge","addArrayProp","setImageSources","addStringProp","setResizeMode","addNumberProp","setBlurRadius","addColorProp","setTintColor","addDirectEvent","view","value","imageSources","map","srcJson","size","width","height","imageSource","RCTImageSource","uri","scale","__packager_asset","packagerAsset","resizeMode","blurRadius","tintColor","url","resolveId","rejectId","imageLoader","loadImageWithURLRequest","request","successId","errorId","success","callbackFromId","error","getImageSizeForURLRequest","then","catch","errorMsg","RCTViewManager","moduleName"],"mappings":"qsBAKA,oEACA,wEACA,4E,GAUMA,CAAAA,mB,0XAGiB,CACnB,MAAO,IAAIC,sBAAJ,CAAiB,KAAKC,MAAtB,CAAP,CACD,C,qDAEe,CACd,MAAO,+GAEJC,YAFI,CAES,QAFT,CAEmB,KAAKC,eAFxB,EAGJC,aAHI,CAGU,YAHV,CAGwB,KAAKC,aAH7B,EAIJC,aAJI,CAIU,YAJV,CAIwB,KAAKC,aAJ7B,EAKJC,YALI,CAKS,WALT,CAKsB,KAAKC,YAL3B,EAMJC,cANI,CAMW,aANX,EAOJA,cAPI,CAOW,QAPX,EAQJA,cARI,CAQW,WARX,EASJA,cATI,CASW,SATX,CAAP,CAUD,C,wDAEeC,I,CAAoBC,K,CAA6B,CAC/DA,KAAK,CAAGA,KAAK,EAAI,EAAjB,CACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAACC,OAAD,CAA8B,CAC3D,GAAMC,CAAAA,IAAI,CAAG,CACXC,KAAK,CAAEF,OAAO,CAACE,KAAR,EAAiB,IAAjB,CAAwBF,OAAO,CAACE,KAAhC,CAAwC,CADpC,CAEXC,MAAM,CAAEH,OAAO,CAACG,MAAR,EAAkB,IAAlB,CAAyBH,OAAO,CAACG,MAAjC,CAA0C,CAFvC,CAAb,CAKA,GAAMC,CAAAA,WAAW,CAAG,GAAIC,wBAAJ,CAClBL,OAAO,CAACM,GADU,CAElBL,IAFkB,CAIlBD,OAAO,CAACO,KAAR,CAAgBP,OAAO,CAACO,KAAxB,CAAgC,CAJd,CAApB,CAOA,GAAIP,OAAO,CAACQ,gBAAR,EAA4B,IAAhC,CAAsC,CACpCJ,WAAW,CAACK,aAAZ,CAA4BT,OAAO,CAACQ,gBAApC,CACD,CAED,MAAOJ,CAAAA,WAAP,CACD,CAlBoB,CAArB,CAoBAR,IAAI,CAACE,YAAL,CAAoBA,YAApB,CACD,C,oDAEaF,I,CAAoBC,K,CAAgB,CAChDD,IAAI,CAACc,UAAL,CAAkBb,KAAlB,CACD,C,oDAEaD,I,CAAoBC,K,CAAgB,CAChDD,IAAI,CAACe,UAAL,CAAkBd,KAAlB,CACD,C,kDAEYD,I,CAAoBC,K,CAAgB,CAC/CD,IAAI,CAACgB,SAAL,CAAiBf,KAAjB,CACD,C,wDAEegB,G,CAAaC,S,CAAmBC,Q,CAAkB,CAChE,MAAO,MAAK7B,MAAL,CAAY8B,WAAZ,CAAwBC,uBAAxB,CAAgDJ,GAAhD,CAAP,CACD,C,0CAEQK,O,CAAiBC,S,CAAmBC,O,CAAiB,CAC5D,GAAMC,CAAAA,OAAO,CAAG,KAAKnC,MAAL,CAAYoC,cAAZ,CAA2BH,SAA3B,CAAhB,CACA,GAAMI,CAAAA,KAAK,CAAG,KAAKrC,MAAL,CAAYoC,cAAZ,CAA2BF,OAA3B,CAAd,CAEA,KAAKlC,MAAL,CAAY8B,WAAZ,CACGQ,yBADH,CAC6BN,OAD7B,EAEGO,IAFH,CAEQ,SAACxB,IAAD,CAAgB,CACpBoB,OAAO,CAACpB,IAAI,CAACC,KAAN,CAAaD,IAAI,CAACE,MAAlB,CAAP,CACD,CAJH,EAKGuB,KALH,CAKS,SAACC,QAAD,CAAc,CACnBJ,KAAK,CAACI,QAAD,CAAL,CACD,CAPH,EAQD,C,iCAzE+BC,wB,EAA5B5C,mB,CACG6C,U,CAAa,qB,cA2EP7C,mB","sourcesContent":["/** @flow */\n\nimport type { Size } from \"InternalLib\";\nimport type UIView from \"UIView\";\nimport type RCTBridge from \"RCTBridge\";\nimport RCTImageView from \"RCTImageView\";\nimport RCTImageSource from \"RCTImageSource\";\nimport RCTViewManager from \"RCTViewManager\";\n\ntype ImageSourceJson = {\n  __packager_asset?: boolean,\n  width?: number,\n  height?: number,\n  scale?: number,\n  uri: string\n};\n\nclass RCTImageViewManager extends RCTViewManager {\n  static moduleName = \"RCTImageViewManager\";\n\n  view(): RCTImageView {\n    return new RCTImageView(this.bridge);\n  }\n\n  describeProps() {\n    return super\n      .describeProps()\n      .addArrayProp(\"source\", this.setImageSources)\n      .addStringProp(\"resizeMode\", this.setResizeMode)\n      .addNumberProp(\"blurRadius\", this.setBlurRadius)\n      .addColorProp(\"tintColor\", this.setTintColor)\n      .addDirectEvent(\"onLoadStart\")\n      .addDirectEvent(\"onLoad\")\n      .addDirectEvent(\"onLoadEnd\")\n      .addDirectEvent(\"onError\");\n  }\n\n  setImageSources(view: RCTImageView, value: ?(ImageSourceJson[])) {\n    value = value || [];\n    const imageSources = value.map((srcJson: ImageSourceJson) => {\n      const size = {\n        width: srcJson.width != null ? srcJson.width : 0,\n        height: srcJson.height != null ? srcJson.height : 0\n      };\n\n      const imageSource = new RCTImageSource(\n        srcJson.uri,\n        size,\n        // $FlowFixMe\n        srcJson.scale ? srcJson.scale : 1\n      );\n\n      if (srcJson.__packager_asset != null) {\n        imageSource.packagerAsset = srcJson.__packager_asset;\n      }\n\n      return imageSource;\n    });\n\n    view.imageSources = imageSources;\n  }\n\n  setResizeMode(view: RCTImageView, value: ?string) {\n    view.resizeMode = value;\n  }\n\n  setBlurRadius(view: RCTImageView, value: ?number) {\n    view.blurRadius = value;\n  }\n\n  setTintColor(view: RCTImageView, value: ?string) {\n    view.tintColor = value;\n  }\n\n  $$prefetchImage(url: string, resolveId: number, rejectId: number) {\n    return this.bridge.imageLoader.loadImageWithURLRequest(url);\n  }\n\n  $getSize(request: string, successId: number, errorId: number) {\n    const success = this.bridge.callbackFromId(successId);\n    const error = this.bridge.callbackFromId(errorId);\n\n    this.bridge.imageLoader\n      .getImageSizeForURLRequest(request)\n      .then((size: Size) => {\n        success(size.width, size.height);\n      })\n      .catch((errorMsg) => {\n        error(errorMsg);\n      });\n  }\n}\n\nexport default RCTImageViewManager;\n"],"file":"RCTImageViewManager.js"}