{"version":3,"sources":["../../../ReactDom/views/Image/RCTImageLoader.js"],"names":["RCTImageLoader","bridge","imageCache","url","loadPromise","Promise","resolve","reject","image","Image","startsWith","src","blob","blobManager","resolveURL","URL","createObjectURL","onload","onerror","existingImage","loadImage","getImagePromise","then","width","height","RCTModule","moduleName"],"mappings":"6nBAIA,4E,GAEMA,CAAAA,c,wEAKJ,wBAAYC,MAAZ,CAA+B,6DAC7B,0GAAMA,MAAN,GACA,MAAKC,UAAL,CAAkB,EAAlB,CAF6B,aAG9B,C,oFAESC,G,CAA6B,iBACrC,GAAMC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACnD,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,EAAd,CAGA,GAAIN,GAAG,CAACO,UAAJ,CAAe,OAAf,CAAJ,CAA6B,CAC3BF,KAAK,CAACG,GAAN,CAAYR,GAAZ,CACA,MAAOG,CAAAA,OAAO,CAACE,KAAD,CAAd,CACD,CAED,GAAIL,GAAG,CAACO,UAAJ,CAAe,OAAf,CAAJ,CAA6B,CAC3B,GAAME,CAAAA,IAAI,CAAG,MAAI,CAACX,MAAL,CAAYY,WAAZ,CAAwBC,UAAxB,CAAmCX,GAAnC,CAAb,CACAA,GAAG,CAAGY,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAN,CACD,CAEDJ,KAAK,CAACS,MAAN,CAAe,iBAAMX,CAAAA,OAAO,CAACE,KAAD,CAAb,EAAf,CACAA,KAAK,CAACU,OAAN,CAAgB,iBAAMX,CAAAA,MAAM,EAAZ,EAAhB,CAEAC,KAAK,CAACG,GAAN,CAAYR,GAAZ,CACD,CAlBmB,CAApB,CAoBA,KAAKD,UAAL,CAAgBC,GAAhB,EAAuBC,WAAvB,CAEA,MAAOA,CAAAA,WAAP,CACD,C,wDAEeD,G,CAA6B,CAC3C,GAAMgB,CAAAA,aAAa,CAAG,KAAKjB,UAAL,CAAgBC,GAAhB,CAAtB,CACA,GAAIgB,aAAa,EAAI,IAArB,CAA2B,CACzB,MAAOA,CAAAA,aAAP,CACD,CACD,MAAO,MAAKC,SAAL,CAAejB,GAAf,CAAP,CACD,C,wEAEuBA,G,CAA6B,CACnD,MAAO,MAAKkB,eAAL,CAAqBlB,GAArB,CAAP,CACD,C,4EAEyBA,G,CAA4B,CACpD,MAAO,MAAKkB,eAAL,CAAqBlB,GAArB,EAA0BmB,IAA1B,CAA+B,SAACd,KAAD,CAAkB,CACtD,MAAO,CACLe,KAAK,CAAEf,KAAK,CAACe,KADR,CAELC,MAAM,CAAEhB,KAAK,CAACgB,MAFT,CAAP,CAID,CALM,CAAP,CAMD,C,4BAvD0BC,mB,EAAvBzB,c,CACG0B,U,CAAa,gB,cAyDP1B,c","sourcesContent":["/** @flow */\n\nimport type { Size } from \"InternalLib\";\nimport type RCTBridge from \"RCTBridge\";\nimport RCTModule from \"RCTModule\";\n\nclass RCTImageLoader extends RCTModule {\n  static moduleName = \"RCTImageLoader\";\n\n  imageCache: { [cacheKey: string]: Promise<Image> };\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.imageCache = {};\n  }\n\n  loadImage(url: string): Promise<Image> {\n    const loadPromise = new Promise((resolve, reject) => {\n      const image = new Image();\n\n      // skip loading on data uris\n      if (url.startsWith(\"data:\")) {\n        image.src = url;\n        return resolve(image);\n      }\n\n      if (url.startsWith(\"blob:\")) {\n        const blob = this.bridge.blobManager.resolveURL(url);\n        url = URL.createObjectURL(blob);\n      }\n\n      image.onload = () => resolve(image);\n      image.onerror = () => reject();\n\n      image.src = url;\n    });\n\n    this.imageCache[url] = loadPromise;\n\n    return loadPromise;\n  }\n\n  getImagePromise(url: string): Promise<Image> {\n    const existingImage = this.imageCache[url];\n    if (existingImage != null) {\n      return existingImage;\n    }\n    return this.loadImage(url);\n  }\n\n  loadImageWithURLRequest(url: string): Promise<Image> {\n    return this.getImagePromise(url);\n  }\n\n  getImageSizeForURLRequest(url: string): Promise<Size> {\n    return this.getImagePromise(url).then((image: Image) => {\n      return {\n        width: image.width,\n        height: image.height\n      };\n    });\n  }\n}\n\nexport default RCTImageLoader;\n"],"file":"RCTImageLoader.js"}