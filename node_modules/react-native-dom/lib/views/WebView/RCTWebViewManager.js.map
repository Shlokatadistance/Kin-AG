{"version":3,"sources":["../../../ReactDom/views/WebView/RCTWebViewManager.js"],"names":["RCTWebViewManager","RCTWebView","bridge","addDirectEvent","addObjectProp","setSource","addBooleanProp","setScrollEnabled","view","value","source","scrollEnabled","reactTag","uiManager","addUIBlock","_","viewRegistry","get","iframeElement","src","script","message","RCTViewManager","moduleName"],"mappings":"qsBAKA,gEACA,4E,GAEMA,CAAAA,iB,gXAGW,CACb,MAAO,IAAIC,oBAAJ,CAAe,KAAKC,MAApB,CAAP,CACD,C,qDAEe,CACd,MAAO,6GAEJC,cAFI,CAEW,gBAFX,EAGJA,cAHI,CAGW,iBAHX,EAIJA,cAJI,CAIW,gBAJX,EAKJC,aALI,CAKU,QALV,CAKoB,KAAKC,SALzB,EAMJC,cANI,CAMW,eANX,CAM4B,KAAKC,gBANjC,CAAP,CAOD,C,4CAESC,I,CAAkBC,K,CAAuB,YACjDD,IAAI,CAACE,MAAL,SAAcD,KAAd,eAAuB,EAAvB,CACD,C,0DAEgBD,I,CAAkBC,K,CAAiB,aAClDD,IAAI,CAACG,aAAL,UAAqBF,KAArB,gBAA8B,KAA9B,CACD,C,wCAEOG,Q,CAAkB,CAEzB,C,8CAEUA,Q,CAAkB,CAE5B,C,wCAEOA,Q,CAAkB,CACxB,KAAKV,MAAL,CAAYW,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAAqB,CACpD,GAAMR,CAAAA,IAAI,CAAGQ,YAAY,CAACC,GAAb,CAAiBL,QAAjB,CAAb,CACA,GAAIJ,IAAI,EAAIA,IAAI,WAAYP,oBAA5B,CAAwC,CACtCO,IAAI,CAACU,aAAL,CAAmBC,GAAnB,EAA0B,EAA1B,CACD,CACF,CALD,EAMD,C,kDAEYP,Q,CAAkB,CAC7B,KAAKV,MAAL,CAAYW,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAAqB,CACpD,GAAMR,CAAAA,IAAI,CAAGQ,YAAY,CAACC,GAAb,CAAiBL,QAAjB,CAAb,CACA,GAAIJ,IAAI,EAAIA,IAAI,WAAYP,oBAA5B,CAAwC,CACtCO,IAAI,CAACE,MAAL,CAAc,EAAd,CACD,CACF,CALD,EAMD,C,4DAEiBE,Q,CAAkBQ,M,CAAgB,CAEnD,C,kDAEYR,Q,CAAkBS,O,CAAiB,CAE/C,C,+BAzD6BC,wB,EAA1BtB,iB,CACGuB,U,CAAa,mB,cA2DPvB,iB","sourcesContent":["/** @flow */\n\nimport type UIView from \"UIView\";\nimport type { WebViewSource } from \"RCTWebView\";\nimport type RCTBridge from \"RCTBridge\";\nimport RCTWebView from \"RCTWebView\";\nimport RCTViewManager from \"RCTViewManager\";\n\nclass RCTWebViewManager extends RCTViewManager {\n  static moduleName = \"RCTWebViewManager\";\n\n  view(): UIView {\n    return new RCTWebView(this.bridge);\n  }\n\n  describeProps() {\n    return super\n      .describeProps()\n      .addDirectEvent(\"onLoadingStart\")\n      .addDirectEvent(\"onLoadingFinish\")\n      .addDirectEvent(\"onLoadingError\")\n      .addObjectProp(\"source\", this.setSource)\n      .addBooleanProp(\"scrollEnabled\", this.setScrollEnabled);\n  }\n\n  setSource(view: RCTWebView, value: ?WebViewSource) {\n    view.source = value ?? {};\n  }\n\n  setScrollEnabled(view: RCTWebView, value: ?boolean) {\n    view.scrollEnabled = value ?? false;\n  }\n\n  $goBack(reactTag: number) {\n    // NO-OP\n  }\n\n  $goForward(reactTag: number) {\n    // NO-OP\n  }\n\n  $reload(reactTag: number) {\n    this.bridge.uiManager.addUIBlock((_, viewRegistry) => {\n      const view = viewRegistry.get(reactTag);\n      if (view && view instanceof RCTWebView) {\n        view.iframeElement.src += \"\";\n      }\n    });\n  }\n\n  $stopLoading(reactTag: number) {\n    this.bridge.uiManager.addUIBlock((_, viewRegistry) => {\n      const view = viewRegistry.get(reactTag);\n      if (view && view instanceof RCTWebView) {\n        view.source = {};\n      }\n    });\n  }\n\n  $injectJavaScript(reactTag: number, script: string) {\n    // NO-OP\n  }\n\n  $postMessage(reactTag: number, message: string) {\n    // NO-OP\n  }\n}\n\nexport default RCTWebViewManager;\n"],"file":"RCTWebViewManager.js"}